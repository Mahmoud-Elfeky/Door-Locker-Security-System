
control_ecu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000170a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  0000170a  0000179e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  00800074  00800074  000017b2  2**0
                  ALLOC
  3 .stab         000022c8  00000000  00000000  000017b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012a4  00000000  00000000  00003a7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__vector_3>
      10:	0c 94 26 07 	jmp	0xe4c	; 0xe4c <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 f3 06 	jmp	0xde6	; 0xde6 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 c0 06 	jmp	0xd80	; 0xd80 <__vector_8>
      24:	0c 94 5a 06 	jmp	0xcb4	; 0xcb4 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 8d 06 	jmp	0xd1a	; 0xd1a <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e0       	ldi	r30, 0x0A	; 10
      68:	f7 e1       	ldi	r31, 0x17	; 23
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 38       	cpi	r26, 0x8A	; 138
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 72 00 	call	0xe4	; 0xe4 <main>
      8a:	0c 94 83 0b 	jmp	0x1706	; 0x1706 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <BUZZER_init>:
/*
 * Description :
 * Functional responsible for Initialize the buzzer device by:
 * 1. Setup the direction of its pin and Initialize it as off
 */
void BUZZER_init(void){
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
GPIO_setupPinDirection(BUZZER_PORT_ID,BUZZER_PIN_ID,PIN_OUTPUT);
      9a:	83 e0       	ldi	r24, 0x03	; 3
      9c:	62 e0       	ldi	r22, 0x02	; 2
      9e:	41 e0       	ldi	r20, 0x01	; 1
      a0:	0e 94 1c 03 	call	0x638	; 0x638 <GPIO_setupPinDirection>
GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
      a4:	83 e0       	ldi	r24, 0x03	; 3
      a6:	62 e0       	ldi	r22, 0x02	; 2
      a8:	40 e0       	ldi	r20, 0x00	; 0
      aa:	0e 94 07 04 	call	0x80e	; 0x80e <GPIO_writePin>
}
      ae:	cf 91       	pop	r28
      b0:	df 91       	pop	r29
      b2:	08 95       	ret

000000b4 <BUZZER_on>:
/*
 * Description :
 * Functional responsible for turn on the buzzer device by:
 * 1. Setup the pin to out 5v on it's pin
 */
void BUZZER_on(void){
      b4:	df 93       	push	r29
      b6:	cf 93       	push	r28
      b8:	cd b7       	in	r28, 0x3d	; 61
      ba:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_HIGH);
      bc:	83 e0       	ldi	r24, 0x03	; 3
      be:	62 e0       	ldi	r22, 0x02	; 2
      c0:	41 e0       	ldi	r20, 0x01	; 1
      c2:	0e 94 07 04 	call	0x80e	; 0x80e <GPIO_writePin>
}
      c6:	cf 91       	pop	r28
      c8:	df 91       	pop	r29
      ca:	08 95       	ret

000000cc <BUZZER_off>:
/*
 * Description :
 * Functional responsible for turn off the buzzer device by:
 * 1. Setup the pin to out 0v on it's pin
 */
void BUZZER_off(void){
      cc:	df 93       	push	r29
      ce:	cf 93       	push	r28
      d0:	cd b7       	in	r28, 0x3d	; 61
      d2:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
      d4:	83 e0       	ldi	r24, 0x03	; 3
      d6:	62 e0       	ldi	r22, 0x02	; 2
      d8:	40 e0       	ldi	r20, 0x00	; 0
      da:	0e 94 07 04 	call	0x80e	; 0x80e <GPIO_writePin>
}
      de:	cf 91       	pop	r28
      e0:	df 91       	pop	r29
      e2:	08 95       	ret

000000e4 <main>:
/*this function for acting as a call back function that is called by ISR after interrupt occuring*/
void startDelay();
/*these 2 array is used for saving passwords as string that user input them at first use*/
uint8 password1[6] , password2[6];

void main(void){
      e4:	df 93       	push	r29
      e6:	cf 93       	push	r28
      e8:	cd b7       	in	r28, 0x3d	; 61
      ea:	de b7       	in	r29, 0x3e	; 62
      ec:	69 97       	sbiw	r28, 0x19	; 25
      ee:	0f b6       	in	r0, 0x3f	; 63
      f0:	f8 94       	cli
      f2:	de bf       	out	0x3e, r29	; 62
      f4:	0f be       	out	0x3f, r0	; 63
      f6:	cd bf       	out	0x3d, r28	; 61
	sei();	/*enable global interrupt*/
      f8:	78 94       	sei
	//Initialize buzzer and motor that is connected to the door
	BUZZER_init();
      fa:	0e 94 49 00 	call	0x92	; 0x92 <BUZZER_init>
	DcMotor_Init();
      fe:	0e 94 20 02 	call	0x440	; 0x440 <DcMotor_Init>
	 * character size 8 bit
	 * parityMode disabled
	 * stopBitSelect is only one bit
	 * baud rate is 9600
	 * */
	UartConfigType s_uartSet={EIGHT_BIT,DISABLED,ONE_BIT,9600};
     102:	9e 01       	movw	r18, r28
     104:	2e 5f       	subi	r18, 0xFE	; 254
     106:	3f 4f       	sbci	r19, 0xFF	; 255
     108:	39 8b       	std	Y+17, r19	; 0x11
     10a:	28 8b       	std	Y+16, r18	; 0x10
     10c:	85 e6       	ldi	r24, 0x65	; 101
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	9b 8b       	std	Y+19, r25	; 0x13
     112:	8a 8b       	std	Y+18, r24	; 0x12
     114:	97 e0       	ldi	r25, 0x07	; 7
     116:	9c 8b       	std	Y+20, r25	; 0x14
     118:	ea 89       	ldd	r30, Y+18	; 0x12
     11a:	fb 89       	ldd	r31, Y+19	; 0x13
     11c:	00 80       	ld	r0, Z
     11e:	2a 89       	ldd	r18, Y+18	; 0x12
     120:	3b 89       	ldd	r19, Y+19	; 0x13
     122:	2f 5f       	subi	r18, 0xFF	; 255
     124:	3f 4f       	sbci	r19, 0xFF	; 255
     126:	3b 8b       	std	Y+19, r19	; 0x13
     128:	2a 8b       	std	Y+18, r18	; 0x12
     12a:	e8 89       	ldd	r30, Y+16	; 0x10
     12c:	f9 89       	ldd	r31, Y+17	; 0x11
     12e:	00 82       	st	Z, r0
     130:	28 89       	ldd	r18, Y+16	; 0x10
     132:	39 89       	ldd	r19, Y+17	; 0x11
     134:	2f 5f       	subi	r18, 0xFF	; 255
     136:	3f 4f       	sbci	r19, 0xFF	; 255
     138:	39 8b       	std	Y+17, r19	; 0x11
     13a:	28 8b       	std	Y+16, r18	; 0x10
     13c:	3c 89       	ldd	r19, Y+20	; 0x14
     13e:	31 50       	subi	r19, 0x01	; 1
     140:	3c 8b       	std	Y+20, r19	; 0x14
     142:	8c 89       	ldd	r24, Y+20	; 0x14
     144:	88 23       	and	r24, r24
     146:	41 f7       	brne	.-48     	; 0x118 <main+0x34>
	UART_init(&s_uartSet);
     148:	ce 01       	movw	r24, r28
     14a:	02 96       	adiw	r24, 0x02	; 2
     14c:	0e 94 2f 0a 	call	0x145e	; 0x145e <UART_init>

	/*initialize the twi module with dynamic configuration
	 *MC twi device address which is 0x01
	 * bit rate is 400.000 kpbs
	 */
	TWIConfigType s_i2cSet={0x01,_400KBPS};
     150:	fe 01       	movw	r30, r28
     152:	39 96       	adiw	r30, 0x09	; 9
     154:	fe 8b       	std	Y+22, r31	; 0x16
     156:	ed 8b       	std	Y+21, r30	; 0x15
     158:	20 e6       	ldi	r18, 0x60	; 96
     15a:	30 e0       	ldi	r19, 0x00	; 0
     15c:	38 8f       	std	Y+24, r19	; 0x18
     15e:	2f 8b       	std	Y+23, r18	; 0x17
     160:	35 e0       	ldi	r19, 0x05	; 5
     162:	39 8f       	std	Y+25, r19	; 0x19
     164:	ef 89       	ldd	r30, Y+23	; 0x17
     166:	f8 8d       	ldd	r31, Y+24	; 0x18
     168:	00 80       	ld	r0, Z
     16a:	2f 89       	ldd	r18, Y+23	; 0x17
     16c:	38 8d       	ldd	r19, Y+24	; 0x18
     16e:	2f 5f       	subi	r18, 0xFF	; 255
     170:	3f 4f       	sbci	r19, 0xFF	; 255
     172:	38 8f       	std	Y+24, r19	; 0x18
     174:	2f 8b       	std	Y+23, r18	; 0x17
     176:	ed 89       	ldd	r30, Y+21	; 0x15
     178:	fe 89       	ldd	r31, Y+22	; 0x16
     17a:	00 82       	st	Z, r0
     17c:	2d 89       	ldd	r18, Y+21	; 0x15
     17e:	3e 89       	ldd	r19, Y+22	; 0x16
     180:	2f 5f       	subi	r18, 0xFF	; 255
     182:	3f 4f       	sbci	r19, 0xFF	; 255
     184:	3e 8b       	std	Y+22, r19	; 0x16
     186:	2d 8b       	std	Y+21, r18	; 0x15
     188:	39 8d       	ldd	r19, Y+25	; 0x19
     18a:	31 50       	subi	r19, 0x01	; 1
     18c:	39 8f       	std	Y+25, r19	; 0x19
     18e:	89 8d       	ldd	r24, Y+25	; 0x19
     190:	88 23       	and	r24, r24
     192:	41 f7       	brne	.-48     	; 0x164 <main+0x80>
	TWI_init(&s_i2cSet);
     194:	ce 01       	movw	r24, r28
     196:	09 96       	adiw	r24, 0x09	; 9
     198:	0e 94 90 09 	call	0x1320	; 0x1320 <TWI_init>
	while(1){

		/*Application code*/

		//receive the choice from mc1
		choice=UART_recieveByte();
     19c:	0e 94 c9 0a 	call	0x1592	; 0x1592 <UART_recieveByte>
     1a0:	89 83       	std	Y+1, r24	; 0x01
		switch(choice){
     1a2:	89 81       	ldd	r24, Y+1	; 0x01
     1a4:	e8 2f       	mov	r30, r24
     1a6:	f0 e0       	ldi	r31, 0x00	; 0
     1a8:	ff 87       	std	Y+15, r31	; 0x0f
     1aa:	ee 87       	std	Y+14, r30	; 0x0e
     1ac:	2e 85       	ldd	r18, Y+14	; 0x0e
     1ae:	3f 85       	ldd	r19, Y+15	; 0x0f
     1b0:	26 32       	cpi	r18, 0x26	; 38
     1b2:	31 05       	cpc	r19, r1
     1b4:	c9 f0       	breq	.+50     	; 0x1e8 <main+0x104>
     1b6:	8e 85       	ldd	r24, Y+14	; 0x0e
     1b8:	9f 85       	ldd	r25, Y+15	; 0x0f
     1ba:	87 32       	cpi	r24, 0x27	; 39
     1bc:	91 05       	cpc	r25, r1
     1be:	34 f4       	brge	.+12     	; 0x1cc <main+0xe8>
     1c0:	ee 85       	ldd	r30, Y+14	; 0x0e
     1c2:	ff 85       	ldd	r31, Y+15	; 0x0f
     1c4:	e3 32       	cpi	r30, 0x23	; 35
     1c6:	f1 05       	cpc	r31, r1
     1c8:	91 f0       	breq	.+36     	; 0x1ee <main+0x10a>
     1ca:	e8 cf       	rjmp	.-48     	; 0x19c <main+0xb8>
     1cc:	2e 85       	ldd	r18, Y+14	; 0x0e
     1ce:	3f 85       	ldd	r19, Y+15	; 0x0f
     1d0:	2b 32       	cpi	r18, 0x2B	; 43
     1d2:	31 05       	cpc	r19, r1
     1d4:	31 f0       	breq	.+12     	; 0x1e2 <main+0xfe>
     1d6:	8e 85       	ldd	r24, Y+14	; 0x0e
     1d8:	9f 85       	ldd	r25, Y+15	; 0x0f
     1da:	8f 33       	cpi	r24, 0x3F	; 63
     1dc:	91 05       	cpc	r25, r1
     1de:	51 f0       	breq	.+20     	; 0x1f4 <main+0x110>
     1e0:	dd cf       	rjmp	.-70     	; 0x19c <main+0xb8>
			case OPEND_DOOR :
				opentTheDoor();
     1e2:	0e 94 51 01 	call	0x2a2	; 0x2a2 <opentTheDoor>
     1e6:	da cf       	rjmp	.-76     	; 0x19c <main+0xb8>
				break;
			case PLAY_BUZZER :
				playBuzzer();
     1e8:	0e 94 42 01 	call	0x284	; 0x284 <playBuzzer>
     1ec:	d7 cf       	rjmp	.-82     	; 0x19c <main+0xb8>
				break;
			case SET_PASSWORD :
				get_password();
     1ee:	0e 94 fd 00 	call	0x1fa	; 0x1fa <get_password>
     1f2:	d4 cf       	rjmp	.-88     	; 0x19c <main+0xb8>
				break;
			case VALIDATE_PASSWORD:
				validatePassword();
     1f4:	0e 94 70 01 	call	0x2e0	; 0x2e0 <validatePassword>
     1f8:	d1 cf       	rjmp	.-94     	; 0x19c <main+0xb8>

000001fa <get_password>:
				break;
		}
	}
}
void get_password(){
     1fa:	df 93       	push	r29
     1fc:	cf 93       	push	r28
     1fe:	0f 92       	push	r0
     200:	cd b7       	in	r28, 0x3d	; 61
     202:	de b7       	in	r29, 0x3e	; 62
	//get the password from the MC1
	do{
		/*get first try from MC1 and store it in array*/
		UART_receiveString(password1);
     204:	84 e8       	ldi	r24, 0x84	; 132
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	0e 94 01 0b 	call	0x1602	; 0x1602 <UART_receiveString>
		/*get second try from MC1  and store it in array*/
		UART_receiveString(password2);
     20c:	8e e7       	ldi	r24, 0x7E	; 126
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	0e 94 01 0b 	call	0x1602	; 0x1602 <UART_receiveString>
		/*check if 2 tries are same or not*/
		if(strcmp(password1,password2) == 0){
     214:	84 e8       	ldi	r24, 0x84	; 132
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	2e e7       	ldi	r18, 0x7E	; 126
     21a:	30 e0       	ldi	r19, 0x00	; 0
     21c:	b9 01       	movw	r22, r18
     21e:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <strcmp>
     222:	00 97       	sbiw	r24, 0x00	; 0
     224:	59 f5       	brne	.+86     	; 0x27c <get_password+0x82>
			/* Write password in the external EEPROM */
			uint8 index=0;
     226:	19 82       	std	Y+1, r1	; 0x01
     228:	18 c0       	rjmp	.+48     	; 0x25a <get_password+0x60>
			for( ; index<5 ; index++)
			{
				EEPROM_writeByte(0x0311+index,password1[index]);
     22a:	89 81       	ldd	r24, Y+1	; 0x01
     22c:	88 2f       	mov	r24, r24
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	8f 5e       	subi	r24, 0xEF	; 239
     232:	9c 4f       	sbci	r25, 0xFC	; 252
     234:	ac 01       	movw	r20, r24
     236:	89 81       	ldd	r24, Y+1	; 0x01
     238:	88 2f       	mov	r24, r24
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	fc 01       	movw	r30, r24
     23e:	ec 57       	subi	r30, 0x7C	; 124
     240:	ff 4f       	sbci	r31, 0xFF	; 255
     242:	20 81       	ld	r18, Z
     244:	ca 01       	movw	r24, r20
     246:	62 2f       	mov	r22, r18
     248:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <EEPROM_writeByte>
				delay(10);
     24c:	8a e0       	ldi	r24, 0x0A	; 10
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	0e 94 a9 01 	call	0x352	; 0x352 <delay>
		UART_receiveString(password2);
		/*check if 2 tries are same or not*/
		if(strcmp(password1,password2) == 0){
			/* Write password in the external EEPROM */
			uint8 index=0;
			for( ; index<5 ; index++)
     254:	89 81       	ldd	r24, Y+1	; 0x01
     256:	8f 5f       	subi	r24, 0xFF	; 255
     258:	89 83       	std	Y+1, r24	; 0x01
     25a:	89 81       	ldd	r24, Y+1	; 0x01
     25c:	85 30       	cpi	r24, 0x05	; 5
     25e:	28 f3       	brcs	.-54     	; 0x22a <get_password+0x30>
			{
				EEPROM_writeByte(0x0311+index,password1[index]);
				delay(10);
			}
			password1[index]='\0';
     260:	89 81       	ldd	r24, Y+1	; 0x01
     262:	88 2f       	mov	r24, r24
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	fc 01       	movw	r30, r24
     268:	ec 57       	subi	r30, 0x7C	; 124
     26a:	ff 4f       	sbci	r31, 0xFF	; 255
     26c:	10 82       	st	Z, r1

			/*if 2 tries are the same send '1' to MC1 as agreement of correct*/
			UART_sendByte('1');
     26e:	81 e3       	ldi	r24, 0x31	; 49
     270:	0e 94 b2 0a 	call	0x1564	; 0x1564 <UART_sendByte>
		else
			/*if 2 tries are not the same send '0' to MC1 as agreement of not correct*/
			UART_sendByte('0');
	}while(1);/*repeat while input is not matched*/

}
     274:	0f 90       	pop	r0
     276:	cf 91       	pop	r28
     278:	df 91       	pop	r29
     27a:	08 95       	ret
			UART_sendByte('1');
			break;
		}
		else
			/*if 2 tries are not the same send '0' to MC1 as agreement of not correct*/
			UART_sendByte('0');
     27c:	80 e3       	ldi	r24, 0x30	; 48
     27e:	0e 94 b2 0a 	call	0x1564	; 0x1564 <UART_sendByte>
     282:	c0 cf       	rjmp	.-128    	; 0x204 <get_password+0xa>

00000284 <playBuzzer>:
	}while(1);/*repeat while input is not matched*/

}
/*
 * open buzzer for 1 minute as an alarm then turn it off*/
void playBuzzer(){
     284:	df 93       	push	r29
     286:	cf 93       	push	r28
     288:	cd b7       	in	r28, 0x3d	; 61
     28a:	de b7       	in	r29, 0x3e	; 62
	BUZZER_on();
     28c:	0e 94 5a 00 	call	0xb4	; 0xb4 <BUZZER_on>
	delay(60000);
     290:	80 e6       	ldi	r24, 0x60	; 96
     292:	9a ee       	ldi	r25, 0xEA	; 234
     294:	0e 94 a9 01 	call	0x352	; 0x352 <delay>
	BUZZER_off();
     298:	0e 94 66 00 	call	0xcc	; 0xcc <BUZZER_off>
}
     29c:	cf 91       	pop	r28
     29e:	df 91       	pop	r29
     2a0:	08 95       	ret

000002a2 <opentTheDoor>:
/*open the door for 15 sec then wait 3 sec then close it in 15 sec*/
void opentTheDoor(){
     2a2:	df 93       	push	r29
     2a4:	cf 93       	push	r28
     2a6:	cd b7       	in	r28, 0x3d	; 61
     2a8:	de b7       	in	r29, 0x3e	; 62
	DcMotor_Rotate(CW);
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	0e 94 3b 02 	call	0x476	; 0x476 <DcMotor_Rotate>
	delay(15000);
     2b0:	88 e9       	ldi	r24, 0x98	; 152
     2b2:	9a e3       	ldi	r25, 0x3A	; 58
     2b4:	0e 94 a9 01 	call	0x352	; 0x352 <delay>
	DcMotor_Rotate(STOP);
     2b8:	80 e0       	ldi	r24, 0x00	; 0
     2ba:	0e 94 3b 02 	call	0x476	; 0x476 <DcMotor_Rotate>
	delay(3000);
     2be:	88 eb       	ldi	r24, 0xB8	; 184
     2c0:	9b e0       	ldi	r25, 0x0B	; 11
     2c2:	0e 94 a9 01 	call	0x352	; 0x352 <delay>
	DcMotor_Rotate(ACW);
     2c6:	82 e0       	ldi	r24, 0x02	; 2
     2c8:	0e 94 3b 02 	call	0x476	; 0x476 <DcMotor_Rotate>
	delay(15000);
     2cc:	88 e9       	ldi	r24, 0x98	; 152
     2ce:	9a e3       	ldi	r25, 0x3A	; 58
     2d0:	0e 94 a9 01 	call	0x352	; 0x352 <delay>
	DcMotor_Rotate(STOP);
     2d4:	80 e0       	ldi	r24, 0x00	; 0
     2d6:	0e 94 3b 02 	call	0x476	; 0x476 <DcMotor_Rotate>
}
     2da:	cf 91       	pop	r28
     2dc:	df 91       	pop	r29
     2de:	08 95       	ret

000002e0 <validatePassword>:
/*this function for validating whether password the user inputed
 * match the one that was saved or not and inform the MC1 with result*/
void validatePassword(){
     2e0:	df 93       	push	r29
     2e2:	cf 93       	push	r28
     2e4:	0f 92       	push	r0
     2e6:	cd b7       	in	r28, 0x3d	; 61
     2e8:	de b7       	in	r29, 0x3e	; 62
	UART_receiveString(password1);
     2ea:	84 e8       	ldi	r24, 0x84	; 132
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	0e 94 01 0b 	call	0x1602	; 0x1602 <UART_receiveString>

	/* Read password from the external EEPROM */
	for(uint8 index=0 ; index<5 ; index++)
     2f2:	19 82       	std	Y+1, r1	; 0x01
     2f4:	17 c0       	rjmp	.+46     	; 0x324 <validatePassword+0x44>
	{
		EEPROM_readByte(0x0311+index,password2+index);
     2f6:	89 81       	ldd	r24, Y+1	; 0x01
     2f8:	88 2f       	mov	r24, r24
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	8f 5e       	subi	r24, 0xEF	; 239
     2fe:	9c 4f       	sbci	r25, 0xFC	; 252
     300:	ac 01       	movw	r20, r24
     302:	89 81       	ldd	r24, Y+1	; 0x01
     304:	88 2f       	mov	r24, r24
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	9c 01       	movw	r18, r24
     30a:	22 58       	subi	r18, 0x82	; 130
     30c:	3f 4f       	sbci	r19, 0xFF	; 255
     30e:	ca 01       	movw	r24, r20
     310:	b9 01       	movw	r22, r18
     312:	0e 94 bc 02 	call	0x578	; 0x578 <EEPROM_readByte>
		delay(10);
     316:	8a e0       	ldi	r24, 0x0A	; 10
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	0e 94 a9 01 	call	0x352	; 0x352 <delay>
 * match the one that was saved or not and inform the MC1 with result*/
void validatePassword(){
	UART_receiveString(password1);

	/* Read password from the external EEPROM */
	for(uint8 index=0 ; index<5 ; index++)
     31e:	89 81       	ldd	r24, Y+1	; 0x01
     320:	8f 5f       	subi	r24, 0xFF	; 255
     322:	89 83       	std	Y+1, r24	; 0x01
     324:	89 81       	ldd	r24, Y+1	; 0x01
     326:	85 30       	cpi	r24, 0x05	; 5
     328:	30 f3       	brcs	.-52     	; 0x2f6 <validatePassword+0x16>
	{
		EEPROM_readByte(0x0311+index,password2+index);
		delay(10);
	}

	if(strcmp(password1,password2) == 0){
     32a:	84 e8       	ldi	r24, 0x84	; 132
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	2e e7       	ldi	r18, 0x7E	; 126
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	b9 01       	movw	r22, r18
     334:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <strcmp>
     338:	00 97       	sbiw	r24, 0x00	; 0
     33a:	21 f4       	brne	.+8      	; 0x344 <validatePassword+0x64>
		UART_sendByte('1');
     33c:	81 e3       	ldi	r24, 0x31	; 49
     33e:	0e 94 b2 0a 	call	0x1564	; 0x1564 <UART_sendByte>
     342:	03 c0       	rjmp	.+6      	; 0x34a <validatePassword+0x6a>
	}
	else{
		UART_sendByte('0');
     344:	80 e3       	ldi	r24, 0x30	; 48
     346:	0e 94 b2 0a 	call	0x1564	; 0x1564 <UART_sendByte>
	}
}
     34a:	0f 90       	pop	r0
     34c:	cf 91       	pop	r28
     34e:	df 91       	pop	r29
     350:	08 95       	ret

00000352 <delay>:
/*intialize number of ticks and final ticks
 * configure timer module to play timer1 in ctc mode with prescaler = FCPU/256
 * and compare vale 3125 which is enough to calculate 100ms
 * set the call back function which update ticks based on interrupts
 * wait until tick is finished which achieve delay*/
void delay(uint16 period){
     352:	df 93       	push	r29
     354:	cf 93       	push	r28
     356:	cd b7       	in	r28, 0x3d	; 61
     358:	de b7       	in	r29, 0x3e	; 62
     35a:	2e 97       	sbiw	r28, 0x0e	; 14
     35c:	0f b6       	in	r0, 0x3f	; 63
     35e:	f8 94       	cli
     360:	de bf       	out	0x3e, r29	; 62
     362:	0f be       	out	0x3f, r0	; 63
     364:	cd bf       	out	0x3d, r28	; 61
     366:	99 87       	std	Y+9, r25	; 0x09
     368:	88 87       	std	Y+8, r24	; 0x08
	tick=0;
     36a:	10 92 75 00 	sts	0x0075, r1
     36e:	10 92 74 00 	sts	0x0074, r1
	finalTick=period/100;
     372:	88 85       	ldd	r24, Y+8	; 0x08
     374:	99 85       	ldd	r25, Y+9	; 0x09
     376:	24 e6       	ldi	r18, 0x64	; 100
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	b9 01       	movw	r22, r18
     37c:	0e 94 44 0b 	call	0x1688	; 0x1688 <__udivmodhi4>
     380:	cb 01       	movw	r24, r22
     382:	90 93 77 00 	sts	0x0077, r25
     386:	80 93 76 00 	sts	0x0076, r24
	TimerConfigType s_timerSet={TIMER_ONE,CTC,F_CPU_256,0,3125};
     38a:	ce 01       	movw	r24, r28
     38c:	01 96       	adiw	r24, 0x01	; 1
     38e:	9b 87       	std	Y+11, r25	; 0x0b
     390:	8a 87       	std	Y+10, r24	; 0x0a
     392:	ec e6       	ldi	r30, 0x6C	; 108
     394:	f0 e0       	ldi	r31, 0x00	; 0
     396:	fd 87       	std	Y+13, r31	; 0x0d
     398:	ec 87       	std	Y+12, r30	; 0x0c
     39a:	f7 e0       	ldi	r31, 0x07	; 7
     39c:	fe 87       	std	Y+14, r31	; 0x0e
     39e:	ec 85       	ldd	r30, Y+12	; 0x0c
     3a0:	fd 85       	ldd	r31, Y+13	; 0x0d
     3a2:	00 80       	ld	r0, Z
     3a4:	8c 85       	ldd	r24, Y+12	; 0x0c
     3a6:	9d 85       	ldd	r25, Y+13	; 0x0d
     3a8:	01 96       	adiw	r24, 0x01	; 1
     3aa:	9d 87       	std	Y+13, r25	; 0x0d
     3ac:	8c 87       	std	Y+12, r24	; 0x0c
     3ae:	ea 85       	ldd	r30, Y+10	; 0x0a
     3b0:	fb 85       	ldd	r31, Y+11	; 0x0b
     3b2:	00 82       	st	Z, r0
     3b4:	8a 85       	ldd	r24, Y+10	; 0x0a
     3b6:	9b 85       	ldd	r25, Y+11	; 0x0b
     3b8:	01 96       	adiw	r24, 0x01	; 1
     3ba:	9b 87       	std	Y+11, r25	; 0x0b
     3bc:	8a 87       	std	Y+10, r24	; 0x0a
     3be:	9e 85       	ldd	r25, Y+14	; 0x0e
     3c0:	91 50       	subi	r25, 0x01	; 1
     3c2:	9e 87       	std	Y+14, r25	; 0x0e
     3c4:	ee 85       	ldd	r30, Y+14	; 0x0e
     3c6:	ee 23       	and	r30, r30
     3c8:	51 f7       	brne	.-44     	; 0x39e <delay+0x4c>
	TIMER_init(&s_timerSet);
     3ca:	ce 01       	movw	r24, r28
     3cc:	01 96       	adiw	r24, 0x01	; 1
     3ce:	0e 94 8c 07 	call	0xf18	; 0xf18 <TIMER_init>
	TIMER_setCallback(startDelay,TIMER_ONE);
     3d2:	82 e0       	ldi	r24, 0x02	; 2
     3d4:	92 e0       	ldi	r25, 0x02	; 2
     3d6:	61 e0       	ldi	r22, 0x01	; 1
     3d8:	0e 94 db 08 	call	0x11b6	; 0x11b6 <TIMER_setCallback>
	while(tick!=finalTick);
     3dc:	20 91 74 00 	lds	r18, 0x0074
     3e0:	30 91 75 00 	lds	r19, 0x0075
     3e4:	80 91 76 00 	lds	r24, 0x0076
     3e8:	90 91 77 00 	lds	r25, 0x0077
     3ec:	28 17       	cp	r18, r24
     3ee:	39 07       	cpc	r19, r25
     3f0:	a9 f7       	brne	.-22     	; 0x3dc <delay+0x8a>

}
     3f2:	2e 96       	adiw	r28, 0x0e	; 14
     3f4:	0f b6       	in	r0, 0x3f	; 63
     3f6:	f8 94       	cli
     3f8:	de bf       	out	0x3e, r29	; 62
     3fa:	0f be       	out	0x3f, r0	; 63
     3fc:	cd bf       	out	0x3d, r28	; 61
     3fe:	cf 91       	pop	r28
     400:	df 91       	pop	r29
     402:	08 95       	ret

00000404 <startDelay>:
/* used as call back function which update ticks based
 * on interrupts and this calling performed by ISR*/
void startDelay(){
     404:	df 93       	push	r29
     406:	cf 93       	push	r28
     408:	cd b7       	in	r28, 0x3d	; 61
     40a:	de b7       	in	r29, 0x3e	; 62
	tick++;
     40c:	80 91 74 00 	lds	r24, 0x0074
     410:	90 91 75 00 	lds	r25, 0x0075
     414:	01 96       	adiw	r24, 0x01	; 1
     416:	90 93 75 00 	sts	0x0075, r25
     41a:	80 93 74 00 	sts	0x0074, r24
	if(tick==finalTick){
     41e:	20 91 74 00 	lds	r18, 0x0074
     422:	30 91 75 00 	lds	r19, 0x0075
     426:	80 91 76 00 	lds	r24, 0x0076
     42a:	90 91 77 00 	lds	r25, 0x0077
     42e:	28 17       	cp	r18, r24
     430:	39 07       	cpc	r19, r25
     432:	19 f4       	brne	.+6      	; 0x43a <startDelay+0x36>
		TIMER_deInit(TIMER_ONE);
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	0e 94 07 09 	call	0x120e	; 0x120e <TIMER_deInit>
	}
}
     43a:	cf 91       	pop	r28
     43c:	df 91       	pop	r29
     43e:	08 95       	ret

00000440 <DcMotor_Init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void DcMotor_Init(void){
     440:	df 93       	push	r29
     442:	cf 93       	push	r28
     444:	cd b7       	in	r28, 0x3d	; 61
     446:	de b7       	in	r29, 0x3e	; 62

	GPIO_setupPinDirection(DC_MOTOR_PORT_ID, DC_MOTOR_PIN1_ID , PIN_OUTPUT);
     448:	83 e0       	ldi	r24, 0x03	; 3
     44a:	63 e0       	ldi	r22, 0x03	; 3
     44c:	41 e0       	ldi	r20, 0x01	; 1
     44e:	0e 94 1c 03 	call	0x638	; 0x638 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID, DC_MOTOR_PIN2_ID , PIN_OUTPUT);
     452:	83 e0       	ldi	r24, 0x03	; 3
     454:	64 e0       	ldi	r22, 0x04	; 4
     456:	41 e0       	ldi	r20, 0x01	; 1
     458:	0e 94 1c 03 	call	0x638	; 0x638 <GPIO_setupPinDirection>

	/* the DC-Motor is stopped at the beginning through the GPIO driver.*/
	GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN1_ID,LOGIC_LOW);
     45c:	83 e0       	ldi	r24, 0x03	; 3
     45e:	63 e0       	ldi	r22, 0x03	; 3
     460:	40 e0       	ldi	r20, 0x00	; 0
     462:	0e 94 07 04 	call	0x80e	; 0x80e <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN2_ID,LOGIC_LOW);
     466:	83 e0       	ldi	r24, 0x03	; 3
     468:	64 e0       	ldi	r22, 0x04	; 4
     46a:	40 e0       	ldi	r20, 0x00	; 0
     46c:	0e 94 07 04 	call	0x80e	; 0x80e <GPIO_writePin>
}
     470:	cf 91       	pop	r28
     472:	df 91       	pop	r29
     474:	08 95       	ret

00000476 <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state){
     476:	df 93       	push	r29
     478:	cf 93       	push	r28
     47a:	00 d0       	rcall	.+0      	; 0x47c <DcMotor_Rotate+0x6>
     47c:	0f 92       	push	r0
     47e:	cd b7       	in	r28, 0x3d	; 61
     480:	de b7       	in	r29, 0x3e	; 62
     482:	89 83       	std	Y+1, r24	; 0x01

	switch (state) {
     484:	89 81       	ldd	r24, Y+1	; 0x01
     486:	28 2f       	mov	r18, r24
     488:	30 e0       	ldi	r19, 0x00	; 0
     48a:	3b 83       	std	Y+3, r19	; 0x03
     48c:	2a 83       	std	Y+2, r18	; 0x02
     48e:	8a 81       	ldd	r24, Y+2	; 0x02
     490:	9b 81       	ldd	r25, Y+3	; 0x03
     492:	81 30       	cpi	r24, 0x01	; 1
     494:	91 05       	cpc	r25, r1
     496:	a1 f0       	breq	.+40     	; 0x4c0 <DcMotor_Rotate+0x4a>
     498:	2a 81       	ldd	r18, Y+2	; 0x02
     49a:	3b 81       	ldd	r19, Y+3	; 0x03
     49c:	22 30       	cpi	r18, 0x02	; 2
     49e:	31 05       	cpc	r19, r1
     4a0:	d1 f0       	breq	.+52     	; 0x4d6 <DcMotor_Rotate+0x60>
     4a2:	8a 81       	ldd	r24, Y+2	; 0x02
     4a4:	9b 81       	ldd	r25, Y+3	; 0x03
     4a6:	00 97       	sbiw	r24, 0x00	; 0
     4a8:	01 f5       	brne	.+64     	; 0x4ea <DcMotor_Rotate+0x74>

	case STOP :
		/*stop moving of dc_motor axes*/
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN1_ID,LOGIC_LOW);
     4aa:	83 e0       	ldi	r24, 0x03	; 3
     4ac:	63 e0       	ldi	r22, 0x03	; 3
     4ae:	40 e0       	ldi	r20, 0x00	; 0
     4b0:	0e 94 07 04 	call	0x80e	; 0x80e <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN2_ID,LOGIC_LOW);
     4b4:	83 e0       	ldi	r24, 0x03	; 3
     4b6:	64 e0       	ldi	r22, 0x04	; 4
     4b8:	40 e0       	ldi	r20, 0x00	; 0
     4ba:	0e 94 07 04 	call	0x80e	; 0x80e <GPIO_writePin>
     4be:	15 c0       	rjmp	.+42     	; 0x4ea <DcMotor_Rotate+0x74>
		break;
	case CW :
		/* move axis of dc_motor clock wise*/
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN1_ID,LOGIC_LOW);
     4c0:	83 e0       	ldi	r24, 0x03	; 3
     4c2:	63 e0       	ldi	r22, 0x03	; 3
     4c4:	40 e0       	ldi	r20, 0x00	; 0
     4c6:	0e 94 07 04 	call	0x80e	; 0x80e <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN2_ID,LOGIC_HIGH);
     4ca:	83 e0       	ldi	r24, 0x03	; 3
     4cc:	64 e0       	ldi	r22, 0x04	; 4
     4ce:	41 e0       	ldi	r20, 0x01	; 1
     4d0:	0e 94 07 04 	call	0x80e	; 0x80e <GPIO_writePin>
     4d4:	0a c0       	rjmp	.+20     	; 0x4ea <DcMotor_Rotate+0x74>
		break;
	case ACW :
		/* move axis of dc_motor anti-clock wise*/
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN1_ID,LOGIC_HIGH);
     4d6:	83 e0       	ldi	r24, 0x03	; 3
     4d8:	63 e0       	ldi	r22, 0x03	; 3
     4da:	41 e0       	ldi	r20, 0x01	; 1
     4dc:	0e 94 07 04 	call	0x80e	; 0x80e <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN2_ID,LOGIC_LOW);
     4e0:	83 e0       	ldi	r24, 0x03	; 3
     4e2:	64 e0       	ldi	r22, 0x04	; 4
     4e4:	40 e0       	ldi	r20, 0x00	; 0
     4e6:	0e 94 07 04 	call	0x80e	; 0x80e <GPIO_writePin>
		break;
	}
}
     4ea:	0f 90       	pop	r0
     4ec:	0f 90       	pop	r0
     4ee:	0f 90       	pop	r0
     4f0:	cf 91       	pop	r28
     4f2:	df 91       	pop	r29
     4f4:	08 95       	ret

000004f6 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     4f6:	df 93       	push	r29
     4f8:	cf 93       	push	r28
     4fa:	00 d0       	rcall	.+0      	; 0x4fc <EEPROM_writeByte+0x6>
     4fc:	00 d0       	rcall	.+0      	; 0x4fe <EEPROM_writeByte+0x8>
     4fe:	cd b7       	in	r28, 0x3d	; 61
     500:	de b7       	in	r29, 0x3e	; 62
     502:	9a 83       	std	Y+2, r25	; 0x02
     504:	89 83       	std	Y+1, r24	; 0x01
     506:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     508:	0e 94 c8 09 	call	0x1390	; 0x1390 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     50c:	0e 94 20 0a 	call	0x1440	; 0x1440 <TWI_getStatus>
     510:	88 30       	cpi	r24, 0x08	; 8
     512:	11 f0       	breq	.+4      	; 0x518 <EEPROM_writeByte+0x22>
        return ERROR;
     514:	1c 82       	std	Y+4, r1	; 0x04
     516:	28 c0       	rjmp	.+80     	; 0x568 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     518:	89 81       	ldd	r24, Y+1	; 0x01
     51a:	9a 81       	ldd	r25, Y+2	; 0x02
     51c:	80 70       	andi	r24, 0x00	; 0
     51e:	97 70       	andi	r25, 0x07	; 7
     520:	88 0f       	add	r24, r24
     522:	89 2f       	mov	r24, r25
     524:	88 1f       	adc	r24, r24
     526:	99 0b       	sbc	r25, r25
     528:	91 95       	neg	r25
     52a:	80 6a       	ori	r24, 0xA0	; 160
     52c:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     530:	0e 94 20 0a 	call	0x1440	; 0x1440 <TWI_getStatus>
     534:	88 31       	cpi	r24, 0x18	; 24
     536:	11 f0       	breq	.+4      	; 0x53c <EEPROM_writeByte+0x46>
        return ERROR; 
     538:	1c 82       	std	Y+4, r1	; 0x04
     53a:	16 c0       	rjmp	.+44     	; 0x568 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     53c:	89 81       	ldd	r24, Y+1	; 0x01
     53e:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     542:	0e 94 20 0a 	call	0x1440	; 0x1440 <TWI_getStatus>
     546:	88 32       	cpi	r24, 0x28	; 40
     548:	11 f0       	breq	.+4      	; 0x54e <EEPROM_writeByte+0x58>
        return ERROR;
     54a:	1c 82       	std	Y+4, r1	; 0x04
     54c:	0d c0       	rjmp	.+26     	; 0x568 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
     54e:	8b 81       	ldd	r24, Y+3	; 0x03
     550:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     554:	0e 94 20 0a 	call	0x1440	; 0x1440 <TWI_getStatus>
     558:	88 32       	cpi	r24, 0x28	; 40
     55a:	11 f0       	breq	.+4      	; 0x560 <EEPROM_writeByte+0x6a>
        return ERROR;
     55c:	1c 82       	std	Y+4, r1	; 0x04
     55e:	04 c0       	rjmp	.+8      	; 0x568 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
     560:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <TWI_stop>
	
    return SUCCESS;
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	8c 83       	std	Y+4, r24	; 0x04
     568:	8c 81       	ldd	r24, Y+4	; 0x04
}
     56a:	0f 90       	pop	r0
     56c:	0f 90       	pop	r0
     56e:	0f 90       	pop	r0
     570:	0f 90       	pop	r0
     572:	cf 91       	pop	r28
     574:	df 91       	pop	r29
     576:	08 95       	ret

00000578 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     578:	df 93       	push	r29
     57a:	cf 93       	push	r28
     57c:	00 d0       	rcall	.+0      	; 0x57e <EEPROM_readByte+0x6>
     57e:	00 d0       	rcall	.+0      	; 0x580 <EEPROM_readByte+0x8>
     580:	0f 92       	push	r0
     582:	cd b7       	in	r28, 0x3d	; 61
     584:	de b7       	in	r29, 0x3e	; 62
     586:	9a 83       	std	Y+2, r25	; 0x02
     588:	89 83       	std	Y+1, r24	; 0x01
     58a:	7c 83       	std	Y+4, r23	; 0x04
     58c:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     58e:	0e 94 c8 09 	call	0x1390	; 0x1390 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     592:	0e 94 20 0a 	call	0x1440	; 0x1440 <TWI_getStatus>
     596:	88 30       	cpi	r24, 0x08	; 8
     598:	11 f0       	breq	.+4      	; 0x59e <EEPROM_readByte+0x26>
        return ERROR;
     59a:	1d 82       	std	Y+5, r1	; 0x05
     59c:	44 c0       	rjmp	.+136    	; 0x626 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     59e:	89 81       	ldd	r24, Y+1	; 0x01
     5a0:	9a 81       	ldd	r25, Y+2	; 0x02
     5a2:	80 70       	andi	r24, 0x00	; 0
     5a4:	97 70       	andi	r25, 0x07	; 7
     5a6:	88 0f       	add	r24, r24
     5a8:	89 2f       	mov	r24, r25
     5aa:	88 1f       	adc	r24, r24
     5ac:	99 0b       	sbc	r25, r25
     5ae:	91 95       	neg	r25
     5b0:	80 6a       	ori	r24, 0xA0	; 160
     5b2:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     5b6:	0e 94 20 0a 	call	0x1440	; 0x1440 <TWI_getStatus>
     5ba:	88 31       	cpi	r24, 0x18	; 24
     5bc:	11 f0       	breq	.+4      	; 0x5c2 <EEPROM_readByte+0x4a>
        return ERROR;
     5be:	1d 82       	std	Y+5, r1	; 0x05
     5c0:	32 c0       	rjmp	.+100    	; 0x626 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     5c2:	89 81       	ldd	r24, Y+1	; 0x01
     5c4:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     5c8:	0e 94 20 0a 	call	0x1440	; 0x1440 <TWI_getStatus>
     5cc:	88 32       	cpi	r24, 0x28	; 40
     5ce:	11 f0       	breq	.+4      	; 0x5d4 <EEPROM_readByte+0x5c>
        return ERROR;
     5d0:	1d 82       	std	Y+5, r1	; 0x05
     5d2:	29 c0       	rjmp	.+82     	; 0x626 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
     5d4:	0e 94 c8 09 	call	0x1390	; 0x1390 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
     5d8:	0e 94 20 0a 	call	0x1440	; 0x1440 <TWI_getStatus>
     5dc:	80 31       	cpi	r24, 0x10	; 16
     5de:	11 f0       	breq	.+4      	; 0x5e4 <EEPROM_readByte+0x6c>
        return ERROR;
     5e0:	1d 82       	std	Y+5, r1	; 0x05
     5e2:	21 c0       	rjmp	.+66     	; 0x626 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     5e4:	89 81       	ldd	r24, Y+1	; 0x01
     5e6:	9a 81       	ldd	r25, Y+2	; 0x02
     5e8:	80 70       	andi	r24, 0x00	; 0
     5ea:	97 70       	andi	r25, 0x07	; 7
     5ec:	88 0f       	add	r24, r24
     5ee:	89 2f       	mov	r24, r25
     5f0:	88 1f       	adc	r24, r24
     5f2:	99 0b       	sbc	r25, r25
     5f4:	91 95       	neg	r25
     5f6:	81 6a       	ori	r24, 0xA1	; 161
     5f8:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
     5fc:	0e 94 20 0a 	call	0x1440	; 0x1440 <TWI_getStatus>
     600:	80 34       	cpi	r24, 0x40	; 64
     602:	11 f0       	breq	.+4      	; 0x608 <EEPROM_readByte+0x90>
        return ERROR;
     604:	1d 82       	std	Y+5, r1	; 0x05
     606:	0f c0       	rjmp	.+30     	; 0x626 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
     608:	0e 94 0d 0a 	call	0x141a	; 0x141a <TWI_readByteWithNACK>
     60c:	eb 81       	ldd	r30, Y+3	; 0x03
     60e:	fc 81       	ldd	r31, Y+4	; 0x04
     610:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
     612:	0e 94 20 0a 	call	0x1440	; 0x1440 <TWI_getStatus>
     616:	88 35       	cpi	r24, 0x58	; 88
     618:	11 f0       	breq	.+4      	; 0x61e <EEPROM_readByte+0xa6>
        return ERROR;
     61a:	1d 82       	std	Y+5, r1	; 0x05
     61c:	04 c0       	rjmp	.+8      	; 0x626 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
     61e:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <TWI_stop>

    return SUCCESS;
     622:	81 e0       	ldi	r24, 0x01	; 1
     624:	8d 83       	std	Y+5, r24	; 0x05
     626:	8d 81       	ldd	r24, Y+5	; 0x05
}
     628:	0f 90       	pop	r0
     62a:	0f 90       	pop	r0
     62c:	0f 90       	pop	r0
     62e:	0f 90       	pop	r0
     630:	0f 90       	pop	r0
     632:	cf 91       	pop	r28
     634:	df 91       	pop	r29
     636:	08 95       	ret

00000638 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     638:	df 93       	push	r29
     63a:	cf 93       	push	r28
     63c:	00 d0       	rcall	.+0      	; 0x63e <GPIO_setupPinDirection+0x6>
     63e:	00 d0       	rcall	.+0      	; 0x640 <GPIO_setupPinDirection+0x8>
     640:	0f 92       	push	r0
     642:	cd b7       	in	r28, 0x3d	; 61
     644:	de b7       	in	r29, 0x3e	; 62
     646:	89 83       	std	Y+1, r24	; 0x01
     648:	6a 83       	std	Y+2, r22	; 0x02
     64a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     64c:	8a 81       	ldd	r24, Y+2	; 0x02
     64e:	88 30       	cpi	r24, 0x08	; 8
     650:	08 f0       	brcs	.+2      	; 0x654 <GPIO_setupPinDirection+0x1c>
     652:	d5 c0       	rjmp	.+426    	; 0x7fe <GPIO_setupPinDirection+0x1c6>
     654:	89 81       	ldd	r24, Y+1	; 0x01
     656:	84 30       	cpi	r24, 0x04	; 4
     658:	08 f0       	brcs	.+2      	; 0x65c <GPIO_setupPinDirection+0x24>
     65a:	d1 c0       	rjmp	.+418    	; 0x7fe <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     65c:	89 81       	ldd	r24, Y+1	; 0x01
     65e:	28 2f       	mov	r18, r24
     660:	30 e0       	ldi	r19, 0x00	; 0
     662:	3d 83       	std	Y+5, r19	; 0x05
     664:	2c 83       	std	Y+4, r18	; 0x04
     666:	8c 81       	ldd	r24, Y+4	; 0x04
     668:	9d 81       	ldd	r25, Y+5	; 0x05
     66a:	81 30       	cpi	r24, 0x01	; 1
     66c:	91 05       	cpc	r25, r1
     66e:	09 f4       	brne	.+2      	; 0x672 <GPIO_setupPinDirection+0x3a>
     670:	43 c0       	rjmp	.+134    	; 0x6f8 <GPIO_setupPinDirection+0xc0>
     672:	2c 81       	ldd	r18, Y+4	; 0x04
     674:	3d 81       	ldd	r19, Y+5	; 0x05
     676:	22 30       	cpi	r18, 0x02	; 2
     678:	31 05       	cpc	r19, r1
     67a:	2c f4       	brge	.+10     	; 0x686 <GPIO_setupPinDirection+0x4e>
     67c:	8c 81       	ldd	r24, Y+4	; 0x04
     67e:	9d 81       	ldd	r25, Y+5	; 0x05
     680:	00 97       	sbiw	r24, 0x00	; 0
     682:	71 f0       	breq	.+28     	; 0x6a0 <GPIO_setupPinDirection+0x68>
     684:	bc c0       	rjmp	.+376    	; 0x7fe <GPIO_setupPinDirection+0x1c6>
     686:	2c 81       	ldd	r18, Y+4	; 0x04
     688:	3d 81       	ldd	r19, Y+5	; 0x05
     68a:	22 30       	cpi	r18, 0x02	; 2
     68c:	31 05       	cpc	r19, r1
     68e:	09 f4       	brne	.+2      	; 0x692 <GPIO_setupPinDirection+0x5a>
     690:	5f c0       	rjmp	.+190    	; 0x750 <GPIO_setupPinDirection+0x118>
     692:	8c 81       	ldd	r24, Y+4	; 0x04
     694:	9d 81       	ldd	r25, Y+5	; 0x05
     696:	83 30       	cpi	r24, 0x03	; 3
     698:	91 05       	cpc	r25, r1
     69a:	09 f4       	brne	.+2      	; 0x69e <GPIO_setupPinDirection+0x66>
     69c:	85 c0       	rjmp	.+266    	; 0x7a8 <GPIO_setupPinDirection+0x170>
     69e:	af c0       	rjmp	.+350    	; 0x7fe <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     6a0:	8b 81       	ldd	r24, Y+3	; 0x03
     6a2:	81 30       	cpi	r24, 0x01	; 1
     6a4:	a1 f4       	brne	.+40     	; 0x6ce <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     6a6:	aa e3       	ldi	r26, 0x3A	; 58
     6a8:	b0 e0       	ldi	r27, 0x00	; 0
     6aa:	ea e3       	ldi	r30, 0x3A	; 58
     6ac:	f0 e0       	ldi	r31, 0x00	; 0
     6ae:	80 81       	ld	r24, Z
     6b0:	48 2f       	mov	r20, r24
     6b2:	8a 81       	ldd	r24, Y+2	; 0x02
     6b4:	28 2f       	mov	r18, r24
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	02 2e       	mov	r0, r18
     6be:	02 c0       	rjmp	.+4      	; 0x6c4 <GPIO_setupPinDirection+0x8c>
     6c0:	88 0f       	add	r24, r24
     6c2:	99 1f       	adc	r25, r25
     6c4:	0a 94       	dec	r0
     6c6:	e2 f7       	brpl	.-8      	; 0x6c0 <GPIO_setupPinDirection+0x88>
     6c8:	84 2b       	or	r24, r20
     6ca:	8c 93       	st	X, r24
     6cc:	98 c0       	rjmp	.+304    	; 0x7fe <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     6ce:	aa e3       	ldi	r26, 0x3A	; 58
     6d0:	b0 e0       	ldi	r27, 0x00	; 0
     6d2:	ea e3       	ldi	r30, 0x3A	; 58
     6d4:	f0 e0       	ldi	r31, 0x00	; 0
     6d6:	80 81       	ld	r24, Z
     6d8:	48 2f       	mov	r20, r24
     6da:	8a 81       	ldd	r24, Y+2	; 0x02
     6dc:	28 2f       	mov	r18, r24
     6de:	30 e0       	ldi	r19, 0x00	; 0
     6e0:	81 e0       	ldi	r24, 0x01	; 1
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	02 2e       	mov	r0, r18
     6e6:	02 c0       	rjmp	.+4      	; 0x6ec <GPIO_setupPinDirection+0xb4>
     6e8:	88 0f       	add	r24, r24
     6ea:	99 1f       	adc	r25, r25
     6ec:	0a 94       	dec	r0
     6ee:	e2 f7       	brpl	.-8      	; 0x6e8 <GPIO_setupPinDirection+0xb0>
     6f0:	80 95       	com	r24
     6f2:	84 23       	and	r24, r20
     6f4:	8c 93       	st	X, r24
     6f6:	83 c0       	rjmp	.+262    	; 0x7fe <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     6f8:	8b 81       	ldd	r24, Y+3	; 0x03
     6fa:	81 30       	cpi	r24, 0x01	; 1
     6fc:	a1 f4       	brne	.+40     	; 0x726 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     6fe:	a7 e3       	ldi	r26, 0x37	; 55
     700:	b0 e0       	ldi	r27, 0x00	; 0
     702:	e7 e3       	ldi	r30, 0x37	; 55
     704:	f0 e0       	ldi	r31, 0x00	; 0
     706:	80 81       	ld	r24, Z
     708:	48 2f       	mov	r20, r24
     70a:	8a 81       	ldd	r24, Y+2	; 0x02
     70c:	28 2f       	mov	r18, r24
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	02 2e       	mov	r0, r18
     716:	02 c0       	rjmp	.+4      	; 0x71c <GPIO_setupPinDirection+0xe4>
     718:	88 0f       	add	r24, r24
     71a:	99 1f       	adc	r25, r25
     71c:	0a 94       	dec	r0
     71e:	e2 f7       	brpl	.-8      	; 0x718 <GPIO_setupPinDirection+0xe0>
     720:	84 2b       	or	r24, r20
     722:	8c 93       	st	X, r24
     724:	6c c0       	rjmp	.+216    	; 0x7fe <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     726:	a7 e3       	ldi	r26, 0x37	; 55
     728:	b0 e0       	ldi	r27, 0x00	; 0
     72a:	e7 e3       	ldi	r30, 0x37	; 55
     72c:	f0 e0       	ldi	r31, 0x00	; 0
     72e:	80 81       	ld	r24, Z
     730:	48 2f       	mov	r20, r24
     732:	8a 81       	ldd	r24, Y+2	; 0x02
     734:	28 2f       	mov	r18, r24
     736:	30 e0       	ldi	r19, 0x00	; 0
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	02 2e       	mov	r0, r18
     73e:	02 c0       	rjmp	.+4      	; 0x744 <GPIO_setupPinDirection+0x10c>
     740:	88 0f       	add	r24, r24
     742:	99 1f       	adc	r25, r25
     744:	0a 94       	dec	r0
     746:	e2 f7       	brpl	.-8      	; 0x740 <GPIO_setupPinDirection+0x108>
     748:	80 95       	com	r24
     74a:	84 23       	and	r24, r20
     74c:	8c 93       	st	X, r24
     74e:	57 c0       	rjmp	.+174    	; 0x7fe <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     750:	8b 81       	ldd	r24, Y+3	; 0x03
     752:	81 30       	cpi	r24, 0x01	; 1
     754:	a1 f4       	brne	.+40     	; 0x77e <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     756:	a4 e3       	ldi	r26, 0x34	; 52
     758:	b0 e0       	ldi	r27, 0x00	; 0
     75a:	e4 e3       	ldi	r30, 0x34	; 52
     75c:	f0 e0       	ldi	r31, 0x00	; 0
     75e:	80 81       	ld	r24, Z
     760:	48 2f       	mov	r20, r24
     762:	8a 81       	ldd	r24, Y+2	; 0x02
     764:	28 2f       	mov	r18, r24
     766:	30 e0       	ldi	r19, 0x00	; 0
     768:	81 e0       	ldi	r24, 0x01	; 1
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	02 2e       	mov	r0, r18
     76e:	02 c0       	rjmp	.+4      	; 0x774 <GPIO_setupPinDirection+0x13c>
     770:	88 0f       	add	r24, r24
     772:	99 1f       	adc	r25, r25
     774:	0a 94       	dec	r0
     776:	e2 f7       	brpl	.-8      	; 0x770 <GPIO_setupPinDirection+0x138>
     778:	84 2b       	or	r24, r20
     77a:	8c 93       	st	X, r24
     77c:	40 c0       	rjmp	.+128    	; 0x7fe <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     77e:	a4 e3       	ldi	r26, 0x34	; 52
     780:	b0 e0       	ldi	r27, 0x00	; 0
     782:	e4 e3       	ldi	r30, 0x34	; 52
     784:	f0 e0       	ldi	r31, 0x00	; 0
     786:	80 81       	ld	r24, Z
     788:	48 2f       	mov	r20, r24
     78a:	8a 81       	ldd	r24, Y+2	; 0x02
     78c:	28 2f       	mov	r18, r24
     78e:	30 e0       	ldi	r19, 0x00	; 0
     790:	81 e0       	ldi	r24, 0x01	; 1
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	02 2e       	mov	r0, r18
     796:	02 c0       	rjmp	.+4      	; 0x79c <GPIO_setupPinDirection+0x164>
     798:	88 0f       	add	r24, r24
     79a:	99 1f       	adc	r25, r25
     79c:	0a 94       	dec	r0
     79e:	e2 f7       	brpl	.-8      	; 0x798 <GPIO_setupPinDirection+0x160>
     7a0:	80 95       	com	r24
     7a2:	84 23       	and	r24, r20
     7a4:	8c 93       	st	X, r24
     7a6:	2b c0       	rjmp	.+86     	; 0x7fe <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     7a8:	8b 81       	ldd	r24, Y+3	; 0x03
     7aa:	81 30       	cpi	r24, 0x01	; 1
     7ac:	a1 f4       	brne	.+40     	; 0x7d6 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     7ae:	a1 e3       	ldi	r26, 0x31	; 49
     7b0:	b0 e0       	ldi	r27, 0x00	; 0
     7b2:	e1 e3       	ldi	r30, 0x31	; 49
     7b4:	f0 e0       	ldi	r31, 0x00	; 0
     7b6:	80 81       	ld	r24, Z
     7b8:	48 2f       	mov	r20, r24
     7ba:	8a 81       	ldd	r24, Y+2	; 0x02
     7bc:	28 2f       	mov	r18, r24
     7be:	30 e0       	ldi	r19, 0x00	; 0
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	02 2e       	mov	r0, r18
     7c6:	02 c0       	rjmp	.+4      	; 0x7cc <GPIO_setupPinDirection+0x194>
     7c8:	88 0f       	add	r24, r24
     7ca:	99 1f       	adc	r25, r25
     7cc:	0a 94       	dec	r0
     7ce:	e2 f7       	brpl	.-8      	; 0x7c8 <GPIO_setupPinDirection+0x190>
     7d0:	84 2b       	or	r24, r20
     7d2:	8c 93       	st	X, r24
     7d4:	14 c0       	rjmp	.+40     	; 0x7fe <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     7d6:	a1 e3       	ldi	r26, 0x31	; 49
     7d8:	b0 e0       	ldi	r27, 0x00	; 0
     7da:	e1 e3       	ldi	r30, 0x31	; 49
     7dc:	f0 e0       	ldi	r31, 0x00	; 0
     7de:	80 81       	ld	r24, Z
     7e0:	48 2f       	mov	r20, r24
     7e2:	8a 81       	ldd	r24, Y+2	; 0x02
     7e4:	28 2f       	mov	r18, r24
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	81 e0       	ldi	r24, 0x01	; 1
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	02 2e       	mov	r0, r18
     7ee:	02 c0       	rjmp	.+4      	; 0x7f4 <GPIO_setupPinDirection+0x1bc>
     7f0:	88 0f       	add	r24, r24
     7f2:	99 1f       	adc	r25, r25
     7f4:	0a 94       	dec	r0
     7f6:	e2 f7       	brpl	.-8      	; 0x7f0 <GPIO_setupPinDirection+0x1b8>
     7f8:	80 95       	com	r24
     7fa:	84 23       	and	r24, r20
     7fc:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     7fe:	0f 90       	pop	r0
     800:	0f 90       	pop	r0
     802:	0f 90       	pop	r0
     804:	0f 90       	pop	r0
     806:	0f 90       	pop	r0
     808:	cf 91       	pop	r28
     80a:	df 91       	pop	r29
     80c:	08 95       	ret

0000080e <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     80e:	df 93       	push	r29
     810:	cf 93       	push	r28
     812:	00 d0       	rcall	.+0      	; 0x814 <GPIO_writePin+0x6>
     814:	00 d0       	rcall	.+0      	; 0x816 <GPIO_writePin+0x8>
     816:	0f 92       	push	r0
     818:	cd b7       	in	r28, 0x3d	; 61
     81a:	de b7       	in	r29, 0x3e	; 62
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	6a 83       	std	Y+2, r22	; 0x02
     820:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     822:	8a 81       	ldd	r24, Y+2	; 0x02
     824:	88 30       	cpi	r24, 0x08	; 8
     826:	08 f0       	brcs	.+2      	; 0x82a <GPIO_writePin+0x1c>
     828:	d5 c0       	rjmp	.+426    	; 0x9d4 <GPIO_writePin+0x1c6>
     82a:	89 81       	ldd	r24, Y+1	; 0x01
     82c:	84 30       	cpi	r24, 0x04	; 4
     82e:	08 f0       	brcs	.+2      	; 0x832 <GPIO_writePin+0x24>
     830:	d1 c0       	rjmp	.+418    	; 0x9d4 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     832:	89 81       	ldd	r24, Y+1	; 0x01
     834:	28 2f       	mov	r18, r24
     836:	30 e0       	ldi	r19, 0x00	; 0
     838:	3d 83       	std	Y+5, r19	; 0x05
     83a:	2c 83       	std	Y+4, r18	; 0x04
     83c:	8c 81       	ldd	r24, Y+4	; 0x04
     83e:	9d 81       	ldd	r25, Y+5	; 0x05
     840:	81 30       	cpi	r24, 0x01	; 1
     842:	91 05       	cpc	r25, r1
     844:	09 f4       	brne	.+2      	; 0x848 <GPIO_writePin+0x3a>
     846:	43 c0       	rjmp	.+134    	; 0x8ce <GPIO_writePin+0xc0>
     848:	2c 81       	ldd	r18, Y+4	; 0x04
     84a:	3d 81       	ldd	r19, Y+5	; 0x05
     84c:	22 30       	cpi	r18, 0x02	; 2
     84e:	31 05       	cpc	r19, r1
     850:	2c f4       	brge	.+10     	; 0x85c <GPIO_writePin+0x4e>
     852:	8c 81       	ldd	r24, Y+4	; 0x04
     854:	9d 81       	ldd	r25, Y+5	; 0x05
     856:	00 97       	sbiw	r24, 0x00	; 0
     858:	71 f0       	breq	.+28     	; 0x876 <GPIO_writePin+0x68>
     85a:	bc c0       	rjmp	.+376    	; 0x9d4 <GPIO_writePin+0x1c6>
     85c:	2c 81       	ldd	r18, Y+4	; 0x04
     85e:	3d 81       	ldd	r19, Y+5	; 0x05
     860:	22 30       	cpi	r18, 0x02	; 2
     862:	31 05       	cpc	r19, r1
     864:	09 f4       	brne	.+2      	; 0x868 <GPIO_writePin+0x5a>
     866:	5f c0       	rjmp	.+190    	; 0x926 <GPIO_writePin+0x118>
     868:	8c 81       	ldd	r24, Y+4	; 0x04
     86a:	9d 81       	ldd	r25, Y+5	; 0x05
     86c:	83 30       	cpi	r24, 0x03	; 3
     86e:	91 05       	cpc	r25, r1
     870:	09 f4       	brne	.+2      	; 0x874 <GPIO_writePin+0x66>
     872:	85 c0       	rjmp	.+266    	; 0x97e <GPIO_writePin+0x170>
     874:	af c0       	rjmp	.+350    	; 0x9d4 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     876:	8b 81       	ldd	r24, Y+3	; 0x03
     878:	81 30       	cpi	r24, 0x01	; 1
     87a:	a1 f4       	brne	.+40     	; 0x8a4 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     87c:	ab e3       	ldi	r26, 0x3B	; 59
     87e:	b0 e0       	ldi	r27, 0x00	; 0
     880:	eb e3       	ldi	r30, 0x3B	; 59
     882:	f0 e0       	ldi	r31, 0x00	; 0
     884:	80 81       	ld	r24, Z
     886:	48 2f       	mov	r20, r24
     888:	8a 81       	ldd	r24, Y+2	; 0x02
     88a:	28 2f       	mov	r18, r24
     88c:	30 e0       	ldi	r19, 0x00	; 0
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	02 2e       	mov	r0, r18
     894:	02 c0       	rjmp	.+4      	; 0x89a <GPIO_writePin+0x8c>
     896:	88 0f       	add	r24, r24
     898:	99 1f       	adc	r25, r25
     89a:	0a 94       	dec	r0
     89c:	e2 f7       	brpl	.-8      	; 0x896 <GPIO_writePin+0x88>
     89e:	84 2b       	or	r24, r20
     8a0:	8c 93       	st	X, r24
     8a2:	98 c0       	rjmp	.+304    	; 0x9d4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     8a4:	ab e3       	ldi	r26, 0x3B	; 59
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	eb e3       	ldi	r30, 0x3B	; 59
     8aa:	f0 e0       	ldi	r31, 0x00	; 0
     8ac:	80 81       	ld	r24, Z
     8ae:	48 2f       	mov	r20, r24
     8b0:	8a 81       	ldd	r24, Y+2	; 0x02
     8b2:	28 2f       	mov	r18, r24
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	02 2e       	mov	r0, r18
     8bc:	02 c0       	rjmp	.+4      	; 0x8c2 <GPIO_writePin+0xb4>
     8be:	88 0f       	add	r24, r24
     8c0:	99 1f       	adc	r25, r25
     8c2:	0a 94       	dec	r0
     8c4:	e2 f7       	brpl	.-8      	; 0x8be <GPIO_writePin+0xb0>
     8c6:	80 95       	com	r24
     8c8:	84 23       	and	r24, r20
     8ca:	8c 93       	st	X, r24
     8cc:	83 c0       	rjmp	.+262    	; 0x9d4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     8ce:	8b 81       	ldd	r24, Y+3	; 0x03
     8d0:	81 30       	cpi	r24, 0x01	; 1
     8d2:	a1 f4       	brne	.+40     	; 0x8fc <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     8d4:	a8 e3       	ldi	r26, 0x38	; 56
     8d6:	b0 e0       	ldi	r27, 0x00	; 0
     8d8:	e8 e3       	ldi	r30, 0x38	; 56
     8da:	f0 e0       	ldi	r31, 0x00	; 0
     8dc:	80 81       	ld	r24, Z
     8de:	48 2f       	mov	r20, r24
     8e0:	8a 81       	ldd	r24, Y+2	; 0x02
     8e2:	28 2f       	mov	r18, r24
     8e4:	30 e0       	ldi	r19, 0x00	; 0
     8e6:	81 e0       	ldi	r24, 0x01	; 1
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	02 2e       	mov	r0, r18
     8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <GPIO_writePin+0xe4>
     8ee:	88 0f       	add	r24, r24
     8f0:	99 1f       	adc	r25, r25
     8f2:	0a 94       	dec	r0
     8f4:	e2 f7       	brpl	.-8      	; 0x8ee <GPIO_writePin+0xe0>
     8f6:	84 2b       	or	r24, r20
     8f8:	8c 93       	st	X, r24
     8fa:	6c c0       	rjmp	.+216    	; 0x9d4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     8fc:	a8 e3       	ldi	r26, 0x38	; 56
     8fe:	b0 e0       	ldi	r27, 0x00	; 0
     900:	e8 e3       	ldi	r30, 0x38	; 56
     902:	f0 e0       	ldi	r31, 0x00	; 0
     904:	80 81       	ld	r24, Z
     906:	48 2f       	mov	r20, r24
     908:	8a 81       	ldd	r24, Y+2	; 0x02
     90a:	28 2f       	mov	r18, r24
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	02 2e       	mov	r0, r18
     914:	02 c0       	rjmp	.+4      	; 0x91a <GPIO_writePin+0x10c>
     916:	88 0f       	add	r24, r24
     918:	99 1f       	adc	r25, r25
     91a:	0a 94       	dec	r0
     91c:	e2 f7       	brpl	.-8      	; 0x916 <GPIO_writePin+0x108>
     91e:	80 95       	com	r24
     920:	84 23       	and	r24, r20
     922:	8c 93       	st	X, r24
     924:	57 c0       	rjmp	.+174    	; 0x9d4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     926:	8b 81       	ldd	r24, Y+3	; 0x03
     928:	81 30       	cpi	r24, 0x01	; 1
     92a:	a1 f4       	brne	.+40     	; 0x954 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     92c:	a5 e3       	ldi	r26, 0x35	; 53
     92e:	b0 e0       	ldi	r27, 0x00	; 0
     930:	e5 e3       	ldi	r30, 0x35	; 53
     932:	f0 e0       	ldi	r31, 0x00	; 0
     934:	80 81       	ld	r24, Z
     936:	48 2f       	mov	r20, r24
     938:	8a 81       	ldd	r24, Y+2	; 0x02
     93a:	28 2f       	mov	r18, r24
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	81 e0       	ldi	r24, 0x01	; 1
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	02 2e       	mov	r0, r18
     944:	02 c0       	rjmp	.+4      	; 0x94a <GPIO_writePin+0x13c>
     946:	88 0f       	add	r24, r24
     948:	99 1f       	adc	r25, r25
     94a:	0a 94       	dec	r0
     94c:	e2 f7       	brpl	.-8      	; 0x946 <GPIO_writePin+0x138>
     94e:	84 2b       	or	r24, r20
     950:	8c 93       	st	X, r24
     952:	40 c0       	rjmp	.+128    	; 0x9d4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     954:	a5 e3       	ldi	r26, 0x35	; 53
     956:	b0 e0       	ldi	r27, 0x00	; 0
     958:	e5 e3       	ldi	r30, 0x35	; 53
     95a:	f0 e0       	ldi	r31, 0x00	; 0
     95c:	80 81       	ld	r24, Z
     95e:	48 2f       	mov	r20, r24
     960:	8a 81       	ldd	r24, Y+2	; 0x02
     962:	28 2f       	mov	r18, r24
     964:	30 e0       	ldi	r19, 0x00	; 0
     966:	81 e0       	ldi	r24, 0x01	; 1
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	02 2e       	mov	r0, r18
     96c:	02 c0       	rjmp	.+4      	; 0x972 <GPIO_writePin+0x164>
     96e:	88 0f       	add	r24, r24
     970:	99 1f       	adc	r25, r25
     972:	0a 94       	dec	r0
     974:	e2 f7       	brpl	.-8      	; 0x96e <GPIO_writePin+0x160>
     976:	80 95       	com	r24
     978:	84 23       	and	r24, r20
     97a:	8c 93       	st	X, r24
     97c:	2b c0       	rjmp	.+86     	; 0x9d4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     97e:	8b 81       	ldd	r24, Y+3	; 0x03
     980:	81 30       	cpi	r24, 0x01	; 1
     982:	a1 f4       	brne	.+40     	; 0x9ac <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     984:	a2 e3       	ldi	r26, 0x32	; 50
     986:	b0 e0       	ldi	r27, 0x00	; 0
     988:	e2 e3       	ldi	r30, 0x32	; 50
     98a:	f0 e0       	ldi	r31, 0x00	; 0
     98c:	80 81       	ld	r24, Z
     98e:	48 2f       	mov	r20, r24
     990:	8a 81       	ldd	r24, Y+2	; 0x02
     992:	28 2f       	mov	r18, r24
     994:	30 e0       	ldi	r19, 0x00	; 0
     996:	81 e0       	ldi	r24, 0x01	; 1
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	02 2e       	mov	r0, r18
     99c:	02 c0       	rjmp	.+4      	; 0x9a2 <GPIO_writePin+0x194>
     99e:	88 0f       	add	r24, r24
     9a0:	99 1f       	adc	r25, r25
     9a2:	0a 94       	dec	r0
     9a4:	e2 f7       	brpl	.-8      	; 0x99e <GPIO_writePin+0x190>
     9a6:	84 2b       	or	r24, r20
     9a8:	8c 93       	st	X, r24
     9aa:	14 c0       	rjmp	.+40     	; 0x9d4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     9ac:	a2 e3       	ldi	r26, 0x32	; 50
     9ae:	b0 e0       	ldi	r27, 0x00	; 0
     9b0:	e2 e3       	ldi	r30, 0x32	; 50
     9b2:	f0 e0       	ldi	r31, 0x00	; 0
     9b4:	80 81       	ld	r24, Z
     9b6:	48 2f       	mov	r20, r24
     9b8:	8a 81       	ldd	r24, Y+2	; 0x02
     9ba:	28 2f       	mov	r18, r24
     9bc:	30 e0       	ldi	r19, 0x00	; 0
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	02 2e       	mov	r0, r18
     9c4:	02 c0       	rjmp	.+4      	; 0x9ca <GPIO_writePin+0x1bc>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	0a 94       	dec	r0
     9cc:	e2 f7       	brpl	.-8      	; 0x9c6 <GPIO_writePin+0x1b8>
     9ce:	80 95       	com	r24
     9d0:	84 23       	and	r24, r20
     9d2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     9d4:	0f 90       	pop	r0
     9d6:	0f 90       	pop	r0
     9d8:	0f 90       	pop	r0
     9da:	0f 90       	pop	r0
     9dc:	0f 90       	pop	r0
     9de:	cf 91       	pop	r28
     9e0:	df 91       	pop	r29
     9e2:	08 95       	ret

000009e4 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     9e4:	df 93       	push	r29
     9e6:	cf 93       	push	r28
     9e8:	00 d0       	rcall	.+0      	; 0x9ea <GPIO_readPin+0x6>
     9ea:	00 d0       	rcall	.+0      	; 0x9ec <GPIO_readPin+0x8>
     9ec:	0f 92       	push	r0
     9ee:	cd b7       	in	r28, 0x3d	; 61
     9f0:	de b7       	in	r29, 0x3e	; 62
     9f2:	8a 83       	std	Y+2, r24	; 0x02
     9f4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
     9f6:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     9f8:	8b 81       	ldd	r24, Y+3	; 0x03
     9fa:	88 30       	cpi	r24, 0x08	; 8
     9fc:	08 f0       	brcs	.+2      	; 0xa00 <GPIO_readPin+0x1c>
     9fe:	84 c0       	rjmp	.+264    	; 0xb08 <GPIO_readPin+0x124>
     a00:	8a 81       	ldd	r24, Y+2	; 0x02
     a02:	84 30       	cpi	r24, 0x04	; 4
     a04:	08 f0       	brcs	.+2      	; 0xa08 <GPIO_readPin+0x24>
     a06:	80 c0       	rjmp	.+256    	; 0xb08 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
     a08:	8a 81       	ldd	r24, Y+2	; 0x02
     a0a:	28 2f       	mov	r18, r24
     a0c:	30 e0       	ldi	r19, 0x00	; 0
     a0e:	3d 83       	std	Y+5, r19	; 0x05
     a10:	2c 83       	std	Y+4, r18	; 0x04
     a12:	4c 81       	ldd	r20, Y+4	; 0x04
     a14:	5d 81       	ldd	r21, Y+5	; 0x05
     a16:	41 30       	cpi	r20, 0x01	; 1
     a18:	51 05       	cpc	r21, r1
     a1a:	79 f1       	breq	.+94     	; 0xa7a <GPIO_readPin+0x96>
     a1c:	8c 81       	ldd	r24, Y+4	; 0x04
     a1e:	9d 81       	ldd	r25, Y+5	; 0x05
     a20:	82 30       	cpi	r24, 0x02	; 2
     a22:	91 05       	cpc	r25, r1
     a24:	34 f4       	brge	.+12     	; 0xa32 <GPIO_readPin+0x4e>
     a26:	2c 81       	ldd	r18, Y+4	; 0x04
     a28:	3d 81       	ldd	r19, Y+5	; 0x05
     a2a:	21 15       	cp	r18, r1
     a2c:	31 05       	cpc	r19, r1
     a2e:	69 f0       	breq	.+26     	; 0xa4a <GPIO_readPin+0x66>
     a30:	6b c0       	rjmp	.+214    	; 0xb08 <GPIO_readPin+0x124>
     a32:	4c 81       	ldd	r20, Y+4	; 0x04
     a34:	5d 81       	ldd	r21, Y+5	; 0x05
     a36:	42 30       	cpi	r20, 0x02	; 2
     a38:	51 05       	cpc	r21, r1
     a3a:	b9 f1       	breq	.+110    	; 0xaaa <GPIO_readPin+0xc6>
     a3c:	8c 81       	ldd	r24, Y+4	; 0x04
     a3e:	9d 81       	ldd	r25, Y+5	; 0x05
     a40:	83 30       	cpi	r24, 0x03	; 3
     a42:	91 05       	cpc	r25, r1
     a44:	09 f4       	brne	.+2      	; 0xa48 <GPIO_readPin+0x64>
     a46:	49 c0       	rjmp	.+146    	; 0xada <GPIO_readPin+0xf6>
     a48:	5f c0       	rjmp	.+190    	; 0xb08 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     a4a:	e9 e3       	ldi	r30, 0x39	; 57
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	80 81       	ld	r24, Z
     a50:	28 2f       	mov	r18, r24
     a52:	30 e0       	ldi	r19, 0x00	; 0
     a54:	8b 81       	ldd	r24, Y+3	; 0x03
     a56:	88 2f       	mov	r24, r24
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	a9 01       	movw	r20, r18
     a5c:	02 c0       	rjmp	.+4      	; 0xa62 <GPIO_readPin+0x7e>
     a5e:	55 95       	asr	r21
     a60:	47 95       	ror	r20
     a62:	8a 95       	dec	r24
     a64:	e2 f7       	brpl	.-8      	; 0xa5e <GPIO_readPin+0x7a>
     a66:	ca 01       	movw	r24, r20
     a68:	81 70       	andi	r24, 0x01	; 1
     a6a:	90 70       	andi	r25, 0x00	; 0
     a6c:	88 23       	and	r24, r24
     a6e:	19 f0       	breq	.+6      	; 0xa76 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	89 83       	std	Y+1, r24	; 0x01
     a74:	49 c0       	rjmp	.+146    	; 0xb08 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     a76:	19 82       	std	Y+1, r1	; 0x01
     a78:	47 c0       	rjmp	.+142    	; 0xb08 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     a7a:	e6 e3       	ldi	r30, 0x36	; 54
     a7c:	f0 e0       	ldi	r31, 0x00	; 0
     a7e:	80 81       	ld	r24, Z
     a80:	28 2f       	mov	r18, r24
     a82:	30 e0       	ldi	r19, 0x00	; 0
     a84:	8b 81       	ldd	r24, Y+3	; 0x03
     a86:	88 2f       	mov	r24, r24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a9 01       	movw	r20, r18
     a8c:	02 c0       	rjmp	.+4      	; 0xa92 <GPIO_readPin+0xae>
     a8e:	55 95       	asr	r21
     a90:	47 95       	ror	r20
     a92:	8a 95       	dec	r24
     a94:	e2 f7       	brpl	.-8      	; 0xa8e <GPIO_readPin+0xaa>
     a96:	ca 01       	movw	r24, r20
     a98:	81 70       	andi	r24, 0x01	; 1
     a9a:	90 70       	andi	r25, 0x00	; 0
     a9c:	88 23       	and	r24, r24
     a9e:	19 f0       	breq	.+6      	; 0xaa6 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	89 83       	std	Y+1, r24	; 0x01
     aa4:	31 c0       	rjmp	.+98     	; 0xb08 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     aa6:	19 82       	std	Y+1, r1	; 0x01
     aa8:	2f c0       	rjmp	.+94     	; 0xb08 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     aaa:	e3 e3       	ldi	r30, 0x33	; 51
     aac:	f0 e0       	ldi	r31, 0x00	; 0
     aae:	80 81       	ld	r24, Z
     ab0:	28 2f       	mov	r18, r24
     ab2:	30 e0       	ldi	r19, 0x00	; 0
     ab4:	8b 81       	ldd	r24, Y+3	; 0x03
     ab6:	88 2f       	mov	r24, r24
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	a9 01       	movw	r20, r18
     abc:	02 c0       	rjmp	.+4      	; 0xac2 <GPIO_readPin+0xde>
     abe:	55 95       	asr	r21
     ac0:	47 95       	ror	r20
     ac2:	8a 95       	dec	r24
     ac4:	e2 f7       	brpl	.-8      	; 0xabe <GPIO_readPin+0xda>
     ac6:	ca 01       	movw	r24, r20
     ac8:	81 70       	andi	r24, 0x01	; 1
     aca:	90 70       	andi	r25, 0x00	; 0
     acc:	88 23       	and	r24, r24
     ace:	19 f0       	breq	.+6      	; 0xad6 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	89 83       	std	Y+1, r24	; 0x01
     ad4:	19 c0       	rjmp	.+50     	; 0xb08 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     ad6:	19 82       	std	Y+1, r1	; 0x01
     ad8:	17 c0       	rjmp	.+46     	; 0xb08 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     ada:	e0 e3       	ldi	r30, 0x30	; 48
     adc:	f0 e0       	ldi	r31, 0x00	; 0
     ade:	80 81       	ld	r24, Z
     ae0:	28 2f       	mov	r18, r24
     ae2:	30 e0       	ldi	r19, 0x00	; 0
     ae4:	8b 81       	ldd	r24, Y+3	; 0x03
     ae6:	88 2f       	mov	r24, r24
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	a9 01       	movw	r20, r18
     aec:	02 c0       	rjmp	.+4      	; 0xaf2 <GPIO_readPin+0x10e>
     aee:	55 95       	asr	r21
     af0:	47 95       	ror	r20
     af2:	8a 95       	dec	r24
     af4:	e2 f7       	brpl	.-8      	; 0xaee <GPIO_readPin+0x10a>
     af6:	ca 01       	movw	r24, r20
     af8:	81 70       	andi	r24, 0x01	; 1
     afa:	90 70       	andi	r25, 0x00	; 0
     afc:	88 23       	and	r24, r24
     afe:	19 f0       	breq	.+6      	; 0xb06 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
     b00:	81 e0       	ldi	r24, 0x01	; 1
     b02:	89 83       	std	Y+1, r24	; 0x01
     b04:	01 c0       	rjmp	.+2      	; 0xb08 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     b06:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
     b08:	89 81       	ldd	r24, Y+1	; 0x01
}
     b0a:	0f 90       	pop	r0
     b0c:	0f 90       	pop	r0
     b0e:	0f 90       	pop	r0
     b10:	0f 90       	pop	r0
     b12:	0f 90       	pop	r0
     b14:	cf 91       	pop	r28
     b16:	df 91       	pop	r29
     b18:	08 95       	ret

00000b1a <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
     b1a:	df 93       	push	r29
     b1c:	cf 93       	push	r28
     b1e:	00 d0       	rcall	.+0      	; 0xb20 <GPIO_setupPortDirection+0x6>
     b20:	00 d0       	rcall	.+0      	; 0xb22 <GPIO_setupPortDirection+0x8>
     b22:	cd b7       	in	r28, 0x3d	; 61
     b24:	de b7       	in	r29, 0x3e	; 62
     b26:	89 83       	std	Y+1, r24	; 0x01
     b28:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
     b2a:	89 81       	ldd	r24, Y+1	; 0x01
     b2c:	84 30       	cpi	r24, 0x04	; 4
     b2e:	90 f5       	brcc	.+100    	; 0xb94 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
     b30:	89 81       	ldd	r24, Y+1	; 0x01
     b32:	28 2f       	mov	r18, r24
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	3c 83       	std	Y+4, r19	; 0x04
     b38:	2b 83       	std	Y+3, r18	; 0x03
     b3a:	8b 81       	ldd	r24, Y+3	; 0x03
     b3c:	9c 81       	ldd	r25, Y+4	; 0x04
     b3e:	81 30       	cpi	r24, 0x01	; 1
     b40:	91 05       	cpc	r25, r1
     b42:	d1 f0       	breq	.+52     	; 0xb78 <GPIO_setupPortDirection+0x5e>
     b44:	2b 81       	ldd	r18, Y+3	; 0x03
     b46:	3c 81       	ldd	r19, Y+4	; 0x04
     b48:	22 30       	cpi	r18, 0x02	; 2
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f4       	brge	.+10     	; 0xb58 <GPIO_setupPortDirection+0x3e>
     b4e:	8b 81       	ldd	r24, Y+3	; 0x03
     b50:	9c 81       	ldd	r25, Y+4	; 0x04
     b52:	00 97       	sbiw	r24, 0x00	; 0
     b54:	61 f0       	breq	.+24     	; 0xb6e <GPIO_setupPortDirection+0x54>
     b56:	1e c0       	rjmp	.+60     	; 0xb94 <GPIO_setupPortDirection+0x7a>
     b58:	2b 81       	ldd	r18, Y+3	; 0x03
     b5a:	3c 81       	ldd	r19, Y+4	; 0x04
     b5c:	22 30       	cpi	r18, 0x02	; 2
     b5e:	31 05       	cpc	r19, r1
     b60:	81 f0       	breq	.+32     	; 0xb82 <GPIO_setupPortDirection+0x68>
     b62:	8b 81       	ldd	r24, Y+3	; 0x03
     b64:	9c 81       	ldd	r25, Y+4	; 0x04
     b66:	83 30       	cpi	r24, 0x03	; 3
     b68:	91 05       	cpc	r25, r1
     b6a:	81 f0       	breq	.+32     	; 0xb8c <GPIO_setupPortDirection+0x72>
     b6c:	13 c0       	rjmp	.+38     	; 0xb94 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
     b6e:	ea e3       	ldi	r30, 0x3A	; 58
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	8a 81       	ldd	r24, Y+2	; 0x02
     b74:	80 83       	st	Z, r24
     b76:	0e c0       	rjmp	.+28     	; 0xb94 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
     b78:	e7 e3       	ldi	r30, 0x37	; 55
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	8a 81       	ldd	r24, Y+2	; 0x02
     b7e:	80 83       	st	Z, r24
     b80:	09 c0       	rjmp	.+18     	; 0xb94 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
     b82:	e4 e3       	ldi	r30, 0x34	; 52
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	8a 81       	ldd	r24, Y+2	; 0x02
     b88:	80 83       	st	Z, r24
     b8a:	04 c0       	rjmp	.+8      	; 0xb94 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
     b8c:	e1 e3       	ldi	r30, 0x31	; 49
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	8a 81       	ldd	r24, Y+2	; 0x02
     b92:	80 83       	st	Z, r24
			break;
		}
	}
}
     b94:	0f 90       	pop	r0
     b96:	0f 90       	pop	r0
     b98:	0f 90       	pop	r0
     b9a:	0f 90       	pop	r0
     b9c:	cf 91       	pop	r28
     b9e:	df 91       	pop	r29
     ba0:	08 95       	ret

00000ba2 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
     ba2:	df 93       	push	r29
     ba4:	cf 93       	push	r28
     ba6:	00 d0       	rcall	.+0      	; 0xba8 <GPIO_writePort+0x6>
     ba8:	00 d0       	rcall	.+0      	; 0xbaa <GPIO_writePort+0x8>
     baa:	cd b7       	in	r28, 0x3d	; 61
     bac:	de b7       	in	r29, 0x3e	; 62
     bae:	89 83       	std	Y+1, r24	; 0x01
     bb0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
     bb2:	89 81       	ldd	r24, Y+1	; 0x01
     bb4:	84 30       	cpi	r24, 0x04	; 4
     bb6:	90 f5       	brcc	.+100    	; 0xc1c <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
     bb8:	89 81       	ldd	r24, Y+1	; 0x01
     bba:	28 2f       	mov	r18, r24
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	3c 83       	std	Y+4, r19	; 0x04
     bc0:	2b 83       	std	Y+3, r18	; 0x03
     bc2:	8b 81       	ldd	r24, Y+3	; 0x03
     bc4:	9c 81       	ldd	r25, Y+4	; 0x04
     bc6:	81 30       	cpi	r24, 0x01	; 1
     bc8:	91 05       	cpc	r25, r1
     bca:	d1 f0       	breq	.+52     	; 0xc00 <GPIO_writePort+0x5e>
     bcc:	2b 81       	ldd	r18, Y+3	; 0x03
     bce:	3c 81       	ldd	r19, Y+4	; 0x04
     bd0:	22 30       	cpi	r18, 0x02	; 2
     bd2:	31 05       	cpc	r19, r1
     bd4:	2c f4       	brge	.+10     	; 0xbe0 <GPIO_writePort+0x3e>
     bd6:	8b 81       	ldd	r24, Y+3	; 0x03
     bd8:	9c 81       	ldd	r25, Y+4	; 0x04
     bda:	00 97       	sbiw	r24, 0x00	; 0
     bdc:	61 f0       	breq	.+24     	; 0xbf6 <GPIO_writePort+0x54>
     bde:	1e c0       	rjmp	.+60     	; 0xc1c <GPIO_writePort+0x7a>
     be0:	2b 81       	ldd	r18, Y+3	; 0x03
     be2:	3c 81       	ldd	r19, Y+4	; 0x04
     be4:	22 30       	cpi	r18, 0x02	; 2
     be6:	31 05       	cpc	r19, r1
     be8:	81 f0       	breq	.+32     	; 0xc0a <GPIO_writePort+0x68>
     bea:	8b 81       	ldd	r24, Y+3	; 0x03
     bec:	9c 81       	ldd	r25, Y+4	; 0x04
     bee:	83 30       	cpi	r24, 0x03	; 3
     bf0:	91 05       	cpc	r25, r1
     bf2:	81 f0       	breq	.+32     	; 0xc14 <GPIO_writePort+0x72>
     bf4:	13 c0       	rjmp	.+38     	; 0xc1c <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
     bf6:	eb e3       	ldi	r30, 0x3B	; 59
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	8a 81       	ldd	r24, Y+2	; 0x02
     bfc:	80 83       	st	Z, r24
     bfe:	0e c0       	rjmp	.+28     	; 0xc1c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
     c00:	e8 e3       	ldi	r30, 0x38	; 56
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	8a 81       	ldd	r24, Y+2	; 0x02
     c06:	80 83       	st	Z, r24
     c08:	09 c0       	rjmp	.+18     	; 0xc1c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
     c0a:	e5 e3       	ldi	r30, 0x35	; 53
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	8a 81       	ldd	r24, Y+2	; 0x02
     c10:	80 83       	st	Z, r24
     c12:	04 c0       	rjmp	.+8      	; 0xc1c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
     c14:	e2 e3       	ldi	r30, 0x32	; 50
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	80 83       	st	Z, r24
			break;
		}
	}
}
     c1c:	0f 90       	pop	r0
     c1e:	0f 90       	pop	r0
     c20:	0f 90       	pop	r0
     c22:	0f 90       	pop	r0
     c24:	cf 91       	pop	r28
     c26:	df 91       	pop	r29
     c28:	08 95       	ret

00000c2a <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
     c2a:	df 93       	push	r29
     c2c:	cf 93       	push	r28
     c2e:	00 d0       	rcall	.+0      	; 0xc30 <GPIO_readPort+0x6>
     c30:	00 d0       	rcall	.+0      	; 0xc32 <GPIO_readPort+0x8>
     c32:	cd b7       	in	r28, 0x3d	; 61
     c34:	de b7       	in	r29, 0x3e	; 62
     c36:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
     c38:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
     c3a:	8a 81       	ldd	r24, Y+2	; 0x02
     c3c:	84 30       	cpi	r24, 0x04	; 4
     c3e:	90 f5       	brcc	.+100    	; 0xca4 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	3c 83       	std	Y+4, r19	; 0x04
     c48:	2b 83       	std	Y+3, r18	; 0x03
     c4a:	8b 81       	ldd	r24, Y+3	; 0x03
     c4c:	9c 81       	ldd	r25, Y+4	; 0x04
     c4e:	81 30       	cpi	r24, 0x01	; 1
     c50:	91 05       	cpc	r25, r1
     c52:	d1 f0       	breq	.+52     	; 0xc88 <GPIO_readPort+0x5e>
     c54:	2b 81       	ldd	r18, Y+3	; 0x03
     c56:	3c 81       	ldd	r19, Y+4	; 0x04
     c58:	22 30       	cpi	r18, 0x02	; 2
     c5a:	31 05       	cpc	r19, r1
     c5c:	2c f4       	brge	.+10     	; 0xc68 <GPIO_readPort+0x3e>
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	9c 81       	ldd	r25, Y+4	; 0x04
     c62:	00 97       	sbiw	r24, 0x00	; 0
     c64:	61 f0       	breq	.+24     	; 0xc7e <GPIO_readPort+0x54>
     c66:	1e c0       	rjmp	.+60     	; 0xca4 <GPIO_readPort+0x7a>
     c68:	2b 81       	ldd	r18, Y+3	; 0x03
     c6a:	3c 81       	ldd	r19, Y+4	; 0x04
     c6c:	22 30       	cpi	r18, 0x02	; 2
     c6e:	31 05       	cpc	r19, r1
     c70:	81 f0       	breq	.+32     	; 0xc92 <GPIO_readPort+0x68>
     c72:	8b 81       	ldd	r24, Y+3	; 0x03
     c74:	9c 81       	ldd	r25, Y+4	; 0x04
     c76:	83 30       	cpi	r24, 0x03	; 3
     c78:	91 05       	cpc	r25, r1
     c7a:	81 f0       	breq	.+32     	; 0xc9c <GPIO_readPort+0x72>
     c7c:	13 c0       	rjmp	.+38     	; 0xca4 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
     c7e:	e9 e3       	ldi	r30, 0x39	; 57
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	80 81       	ld	r24, Z
     c84:	89 83       	std	Y+1, r24	; 0x01
     c86:	0e c0       	rjmp	.+28     	; 0xca4 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
     c88:	e6 e3       	ldi	r30, 0x36	; 54
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
     c8e:	89 83       	std	Y+1, r24	; 0x01
     c90:	09 c0       	rjmp	.+18     	; 0xca4 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
     c92:	e3 e3       	ldi	r30, 0x33	; 51
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	89 83       	std	Y+1, r24	; 0x01
     c9a:	04 c0       	rjmp	.+8      	; 0xca4 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
     c9c:	e0 e3       	ldi	r30, 0x30	; 48
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	80 81       	ld	r24, Z
     ca2:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
     ca4:	89 81       	ldd	r24, Y+1	; 0x01
}
     ca6:	0f 90       	pop	r0
     ca8:	0f 90       	pop	r0
     caa:	0f 90       	pop	r0
     cac:	0f 90       	pop	r0
     cae:	cf 91       	pop	r28
     cb0:	df 91       	pop	r29
     cb2:	08 95       	ret

00000cb4 <__vector_9>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect){
     cb4:	1f 92       	push	r1
     cb6:	0f 92       	push	r0
     cb8:	0f b6       	in	r0, 0x3f	; 63
     cba:	0f 92       	push	r0
     cbc:	11 24       	eor	r1, r1
     cbe:	2f 93       	push	r18
     cc0:	3f 93       	push	r19
     cc2:	4f 93       	push	r20
     cc4:	5f 93       	push	r21
     cc6:	6f 93       	push	r22
     cc8:	7f 93       	push	r23
     cca:	8f 93       	push	r24
     ccc:	9f 93       	push	r25
     cce:	af 93       	push	r26
     cd0:	bf 93       	push	r27
     cd2:	ef 93       	push	r30
     cd4:	ff 93       	push	r31
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrT0!=NULL_PTR)
     cde:	80 91 78 00 	lds	r24, 0x0078
     ce2:	90 91 79 00 	lds	r25, 0x0079
     ce6:	00 97       	sbiw	r24, 0x00	; 0
     ce8:	29 f0       	breq	.+10     	; 0xcf4 <__vector_9+0x40>
		(*g_callBackPtrT0)();
     cea:	e0 91 78 00 	lds	r30, 0x0078
     cee:	f0 91 79 00 	lds	r31, 0x0079
     cf2:	09 95       	icall
}
     cf4:	cf 91       	pop	r28
     cf6:	df 91       	pop	r29
     cf8:	ff 91       	pop	r31
     cfa:	ef 91       	pop	r30
     cfc:	bf 91       	pop	r27
     cfe:	af 91       	pop	r26
     d00:	9f 91       	pop	r25
     d02:	8f 91       	pop	r24
     d04:	7f 91       	pop	r23
     d06:	6f 91       	pop	r22
     d08:	5f 91       	pop	r21
     d0a:	4f 91       	pop	r20
     d0c:	3f 91       	pop	r19
     d0e:	2f 91       	pop	r18
     d10:	0f 90       	pop	r0
     d12:	0f be       	out	0x3f, r0	; 63
     d14:	0f 90       	pop	r0
     d16:	1f 90       	pop	r1
     d18:	18 95       	reti

00000d1a <__vector_19>:

ISR(TIMER0_COMP_vect){
     d1a:	1f 92       	push	r1
     d1c:	0f 92       	push	r0
     d1e:	0f b6       	in	r0, 0x3f	; 63
     d20:	0f 92       	push	r0
     d22:	11 24       	eor	r1, r1
     d24:	2f 93       	push	r18
     d26:	3f 93       	push	r19
     d28:	4f 93       	push	r20
     d2a:	5f 93       	push	r21
     d2c:	6f 93       	push	r22
     d2e:	7f 93       	push	r23
     d30:	8f 93       	push	r24
     d32:	9f 93       	push	r25
     d34:	af 93       	push	r26
     d36:	bf 93       	push	r27
     d38:	ef 93       	push	r30
     d3a:	ff 93       	push	r31
     d3c:	df 93       	push	r29
     d3e:	cf 93       	push	r28
     d40:	cd b7       	in	r28, 0x3d	; 61
     d42:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrT0!=NULL_PTR)
     d44:	80 91 78 00 	lds	r24, 0x0078
     d48:	90 91 79 00 	lds	r25, 0x0079
     d4c:	00 97       	sbiw	r24, 0x00	; 0
     d4e:	29 f0       	breq	.+10     	; 0xd5a <__vector_19+0x40>
		(*g_callBackPtrT0)();
     d50:	e0 91 78 00 	lds	r30, 0x0078
     d54:	f0 91 79 00 	lds	r31, 0x0079
     d58:	09 95       	icall
}
     d5a:	cf 91       	pop	r28
     d5c:	df 91       	pop	r29
     d5e:	ff 91       	pop	r31
     d60:	ef 91       	pop	r30
     d62:	bf 91       	pop	r27
     d64:	af 91       	pop	r26
     d66:	9f 91       	pop	r25
     d68:	8f 91       	pop	r24
     d6a:	7f 91       	pop	r23
     d6c:	6f 91       	pop	r22
     d6e:	5f 91       	pop	r21
     d70:	4f 91       	pop	r20
     d72:	3f 91       	pop	r19
     d74:	2f 91       	pop	r18
     d76:	0f 90       	pop	r0
     d78:	0f be       	out	0x3f, r0	; 63
     d7a:	0f 90       	pop	r0
     d7c:	1f 90       	pop	r1
     d7e:	18 95       	reti

00000d80 <__vector_8>:
ISR(TIMER1_OVF_vect){
     d80:	1f 92       	push	r1
     d82:	0f 92       	push	r0
     d84:	0f b6       	in	r0, 0x3f	; 63
     d86:	0f 92       	push	r0
     d88:	11 24       	eor	r1, r1
     d8a:	2f 93       	push	r18
     d8c:	3f 93       	push	r19
     d8e:	4f 93       	push	r20
     d90:	5f 93       	push	r21
     d92:	6f 93       	push	r22
     d94:	7f 93       	push	r23
     d96:	8f 93       	push	r24
     d98:	9f 93       	push	r25
     d9a:	af 93       	push	r26
     d9c:	bf 93       	push	r27
     d9e:	ef 93       	push	r30
     da0:	ff 93       	push	r31
     da2:	df 93       	push	r29
     da4:	cf 93       	push	r28
     da6:	cd b7       	in	r28, 0x3d	; 61
     da8:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrT1!=NULL_PTR)
     daa:	80 91 7a 00 	lds	r24, 0x007A
     dae:	90 91 7b 00 	lds	r25, 0x007B
     db2:	00 97       	sbiw	r24, 0x00	; 0
     db4:	29 f0       	breq	.+10     	; 0xdc0 <__vector_8+0x40>
		(*g_callBackPtrT1)();
     db6:	e0 91 7a 00 	lds	r30, 0x007A
     dba:	f0 91 7b 00 	lds	r31, 0x007B
     dbe:	09 95       	icall
}
     dc0:	cf 91       	pop	r28
     dc2:	df 91       	pop	r29
     dc4:	ff 91       	pop	r31
     dc6:	ef 91       	pop	r30
     dc8:	bf 91       	pop	r27
     dca:	af 91       	pop	r26
     dcc:	9f 91       	pop	r25
     dce:	8f 91       	pop	r24
     dd0:	7f 91       	pop	r23
     dd2:	6f 91       	pop	r22
     dd4:	5f 91       	pop	r21
     dd6:	4f 91       	pop	r20
     dd8:	3f 91       	pop	r19
     dda:	2f 91       	pop	r18
     ddc:	0f 90       	pop	r0
     dde:	0f be       	out	0x3f, r0	; 63
     de0:	0f 90       	pop	r0
     de2:	1f 90       	pop	r1
     de4:	18 95       	reti

00000de6 <__vector_6>:

ISR(TIMER1_COMPA_vect){
     de6:	1f 92       	push	r1
     de8:	0f 92       	push	r0
     dea:	0f b6       	in	r0, 0x3f	; 63
     dec:	0f 92       	push	r0
     dee:	11 24       	eor	r1, r1
     df0:	2f 93       	push	r18
     df2:	3f 93       	push	r19
     df4:	4f 93       	push	r20
     df6:	5f 93       	push	r21
     df8:	6f 93       	push	r22
     dfa:	7f 93       	push	r23
     dfc:	8f 93       	push	r24
     dfe:	9f 93       	push	r25
     e00:	af 93       	push	r26
     e02:	bf 93       	push	r27
     e04:	ef 93       	push	r30
     e06:	ff 93       	push	r31
     e08:	df 93       	push	r29
     e0a:	cf 93       	push	r28
     e0c:	cd b7       	in	r28, 0x3d	; 61
     e0e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrT1!=NULL_PTR)
     e10:	80 91 7a 00 	lds	r24, 0x007A
     e14:	90 91 7b 00 	lds	r25, 0x007B
     e18:	00 97       	sbiw	r24, 0x00	; 0
     e1a:	29 f0       	breq	.+10     	; 0xe26 <__vector_6+0x40>
		(*g_callBackPtrT1)();
     e1c:	e0 91 7a 00 	lds	r30, 0x007A
     e20:	f0 91 7b 00 	lds	r31, 0x007B
     e24:	09 95       	icall
}
     e26:	cf 91       	pop	r28
     e28:	df 91       	pop	r29
     e2a:	ff 91       	pop	r31
     e2c:	ef 91       	pop	r30
     e2e:	bf 91       	pop	r27
     e30:	af 91       	pop	r26
     e32:	9f 91       	pop	r25
     e34:	8f 91       	pop	r24
     e36:	7f 91       	pop	r23
     e38:	6f 91       	pop	r22
     e3a:	5f 91       	pop	r21
     e3c:	4f 91       	pop	r20
     e3e:	3f 91       	pop	r19
     e40:	2f 91       	pop	r18
     e42:	0f 90       	pop	r0
     e44:	0f be       	out	0x3f, r0	; 63
     e46:	0f 90       	pop	r0
     e48:	1f 90       	pop	r1
     e4a:	18 95       	reti

00000e4c <__vector_4>:
ISR(TIMER2_OVF_vect){
     e4c:	1f 92       	push	r1
     e4e:	0f 92       	push	r0
     e50:	0f b6       	in	r0, 0x3f	; 63
     e52:	0f 92       	push	r0
     e54:	11 24       	eor	r1, r1
     e56:	2f 93       	push	r18
     e58:	3f 93       	push	r19
     e5a:	4f 93       	push	r20
     e5c:	5f 93       	push	r21
     e5e:	6f 93       	push	r22
     e60:	7f 93       	push	r23
     e62:	8f 93       	push	r24
     e64:	9f 93       	push	r25
     e66:	af 93       	push	r26
     e68:	bf 93       	push	r27
     e6a:	ef 93       	push	r30
     e6c:	ff 93       	push	r31
     e6e:	df 93       	push	r29
     e70:	cf 93       	push	r28
     e72:	cd b7       	in	r28, 0x3d	; 61
     e74:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrT2!=NULL_PTR)
     e76:	80 91 7c 00 	lds	r24, 0x007C
     e7a:	90 91 7d 00 	lds	r25, 0x007D
     e7e:	00 97       	sbiw	r24, 0x00	; 0
     e80:	29 f0       	breq	.+10     	; 0xe8c <__vector_4+0x40>
		(*g_callBackPtrT2)();
     e82:	e0 91 7c 00 	lds	r30, 0x007C
     e86:	f0 91 7d 00 	lds	r31, 0x007D
     e8a:	09 95       	icall
}
     e8c:	cf 91       	pop	r28
     e8e:	df 91       	pop	r29
     e90:	ff 91       	pop	r31
     e92:	ef 91       	pop	r30
     e94:	bf 91       	pop	r27
     e96:	af 91       	pop	r26
     e98:	9f 91       	pop	r25
     e9a:	8f 91       	pop	r24
     e9c:	7f 91       	pop	r23
     e9e:	6f 91       	pop	r22
     ea0:	5f 91       	pop	r21
     ea2:	4f 91       	pop	r20
     ea4:	3f 91       	pop	r19
     ea6:	2f 91       	pop	r18
     ea8:	0f 90       	pop	r0
     eaa:	0f be       	out	0x3f, r0	; 63
     eac:	0f 90       	pop	r0
     eae:	1f 90       	pop	r1
     eb0:	18 95       	reti

00000eb2 <__vector_3>:

ISR(TIMER2_COMP_vect){
     eb2:	1f 92       	push	r1
     eb4:	0f 92       	push	r0
     eb6:	0f b6       	in	r0, 0x3f	; 63
     eb8:	0f 92       	push	r0
     eba:	11 24       	eor	r1, r1
     ebc:	2f 93       	push	r18
     ebe:	3f 93       	push	r19
     ec0:	4f 93       	push	r20
     ec2:	5f 93       	push	r21
     ec4:	6f 93       	push	r22
     ec6:	7f 93       	push	r23
     ec8:	8f 93       	push	r24
     eca:	9f 93       	push	r25
     ecc:	af 93       	push	r26
     ece:	bf 93       	push	r27
     ed0:	ef 93       	push	r30
     ed2:	ff 93       	push	r31
     ed4:	df 93       	push	r29
     ed6:	cf 93       	push	r28
     ed8:	cd b7       	in	r28, 0x3d	; 61
     eda:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrT2!=NULL_PTR)
     edc:	80 91 7c 00 	lds	r24, 0x007C
     ee0:	90 91 7d 00 	lds	r25, 0x007D
     ee4:	00 97       	sbiw	r24, 0x00	; 0
     ee6:	29 f0       	breq	.+10     	; 0xef2 <__vector_3+0x40>
		(*g_callBackPtrT2)();
     ee8:	e0 91 7c 00 	lds	r30, 0x007C
     eec:	f0 91 7d 00 	lds	r31, 0x007D
     ef0:	09 95       	icall
}
     ef2:	cf 91       	pop	r28
     ef4:	df 91       	pop	r29
     ef6:	ff 91       	pop	r31
     ef8:	ef 91       	pop	r30
     efa:	bf 91       	pop	r27
     efc:	af 91       	pop	r26
     efe:	9f 91       	pop	r25
     f00:	8f 91       	pop	r24
     f02:	7f 91       	pop	r23
     f04:	6f 91       	pop	r22
     f06:	5f 91       	pop	r21
     f08:	4f 91       	pop	r20
     f0a:	3f 91       	pop	r19
     f0c:	2f 91       	pop	r18
     f0e:	0f 90       	pop	r0
     f10:	0f be       	out	0x3f, r0	; 63
     f12:	0f 90       	pop	r0
     f14:	1f 90       	pop	r1
     f16:	18 95       	reti

00000f18 <TIMER_init>:
 * 	2. Set the required edge detection.
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 */

void TIMER_init(TimerConfigType* timerConfigs){
     f18:	df 93       	push	r29
     f1a:	cf 93       	push	r28
     f1c:	00 d0       	rcall	.+0      	; 0xf1e <TIMER_init+0x6>
     f1e:	cd b7       	in	r28, 0x3d	; 61
     f20:	de b7       	in	r29, 0x3e	; 62
     f22:	9a 83       	std	Y+2, r25	; 0x02
     f24:	89 83       	std	Y+1, r24	; 0x01
	/*this for timer0 (overflow or CTC)*/
	if(timerConfigs->e_number==TIMER_ZERO){
     f26:	e9 81       	ldd	r30, Y+1	; 0x01
     f28:	fa 81       	ldd	r31, Y+2	; 0x02
     f2a:	80 81       	ld	r24, Z
     f2c:	88 23       	and	r24, r24
     f2e:	09 f0       	breq	.+2      	; 0xf32 <TIMER_init+0x1a>
     f30:	62 c0       	rjmp	.+196    	; 0xff6 <TIMER_init+0xde>
		if(timerConfigs->e_mode==OVERFLOW){
     f32:	e9 81       	ldd	r30, Y+1	; 0x01
     f34:	fa 81       	ldd	r31, Y+2	; 0x02
     f36:	81 81       	ldd	r24, Z+1	; 0x01
     f38:	88 23       	and	r24, r24
     f3a:	41 f5       	brne	.+80     	; 0xf8c <TIMER_init+0x74>
			TCCR0|=(1<<FOC0);//determine Non-PWM mode and overflow mode and OC is off
     f3c:	a3 e5       	ldi	r26, 0x53	; 83
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	e3 e5       	ldi	r30, 0x53	; 83
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	80 68       	ori	r24, 0x80	; 128
     f48:	8c 93       	st	X, r24
			TCCR0|=((TCCR0 & 0xF8)|(timerConfigs->e_clock&0x07)); //set the clock
     f4a:	a3 e5       	ldi	r26, 0x53	; 83
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	e3 e5       	ldi	r30, 0x53	; 83
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	28 2f       	mov	r18, r24
     f56:	e3 e5       	ldi	r30, 0x53	; 83
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	98 2f       	mov	r25, r24
     f5e:	98 7f       	andi	r25, 0xF8	; 248
     f60:	e9 81       	ldd	r30, Y+1	; 0x01
     f62:	fa 81       	ldd	r31, Y+2	; 0x02
     f64:	82 81       	ldd	r24, Z+2	; 0x02
     f66:	87 70       	andi	r24, 0x07	; 7
     f68:	89 2b       	or	r24, r25
     f6a:	82 2b       	or	r24, r18
     f6c:	8c 93       	st	X, r24
			TCNT0=timerConfigs->initValue;
     f6e:	a2 e5       	ldi	r26, 0x52	; 82
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e9 81       	ldd	r30, Y+1	; 0x01
     f74:	fa 81       	ldd	r31, Y+2	; 0x02
     f76:	83 81       	ldd	r24, Z+3	; 0x03
     f78:	94 81       	ldd	r25, Z+4	; 0x04
     f7a:	8c 93       	st	X, r24
			TIMSK|=(1<<TOIE0);//enable interrupt for overflow module
     f7c:	a9 e5       	ldi	r26, 0x59	; 89
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	e9 e5       	ldi	r30, 0x59	; 89
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	81 60       	ori	r24, 0x01	; 1
     f88:	8c 93       	st	X, r24
     f8a:	10 c1       	rjmp	.+544    	; 0x11ac <TIMER_init+0x294>
			//flag is cleared automatically when execute ISR
		}
		else if(timerConfigs->e_mode==CTC){
     f8c:	e9 81       	ldd	r30, Y+1	; 0x01
     f8e:	fa 81       	ldd	r31, Y+2	; 0x02
     f90:	81 81       	ldd	r24, Z+1	; 0x01
     f92:	81 30       	cpi	r24, 0x01	; 1
     f94:	09 f0       	breq	.+2      	; 0xf98 <TIMER_init+0x80>
     f96:	0a c1       	rjmp	.+532    	; 0x11ac <TIMER_init+0x294>
			TCCR0|=(1<<FOC0)|(1<<WGM01);//determine Non-PWM mode and CTC mode and OC is off
     f98:	a3 e5       	ldi	r26, 0x53	; 83
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	e3 e5       	ldi	r30, 0x53	; 83
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	88 68       	ori	r24, 0x88	; 136
     fa4:	8c 93       	st	X, r24
			TCCR0|=((TCCR0 & 0xF8)|(timerConfigs->e_clock&0x07)); //set the clock
     fa6:	a3 e5       	ldi	r26, 0x53	; 83
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	e3 e5       	ldi	r30, 0x53	; 83
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	28 2f       	mov	r18, r24
     fb2:	e3 e5       	ldi	r30, 0x53	; 83
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	98 2f       	mov	r25, r24
     fba:	98 7f       	andi	r25, 0xF8	; 248
     fbc:	e9 81       	ldd	r30, Y+1	; 0x01
     fbe:	fa 81       	ldd	r31, Y+2	; 0x02
     fc0:	82 81       	ldd	r24, Z+2	; 0x02
     fc2:	87 70       	andi	r24, 0x07	; 7
     fc4:	89 2b       	or	r24, r25
     fc6:	82 2b       	or	r24, r18
     fc8:	8c 93       	st	X, r24
			TCNT0=timerConfigs->initValue;
     fca:	a2 e5       	ldi	r26, 0x52	; 82
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	e9 81       	ldd	r30, Y+1	; 0x01
     fd0:	fa 81       	ldd	r31, Y+2	; 0x02
     fd2:	83 81       	ldd	r24, Z+3	; 0x03
     fd4:	94 81       	ldd	r25, Z+4	; 0x04
     fd6:	8c 93       	st	X, r24
			OCR0=timerConfigs->compareValue;
     fd8:	ac e5       	ldi	r26, 0x5C	; 92
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	e9 81       	ldd	r30, Y+1	; 0x01
     fde:	fa 81       	ldd	r31, Y+2	; 0x02
     fe0:	85 81       	ldd	r24, Z+5	; 0x05
     fe2:	96 81       	ldd	r25, Z+6	; 0x06
     fe4:	8c 93       	st	X, r24
			TIMSK|=(1<<OCIE0);//enable interrupt for CTC module
     fe6:	a9 e5       	ldi	r26, 0x59	; 89
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	e9 e5       	ldi	r30, 0x59	; 89
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	82 60       	ori	r24, 0x02	; 2
     ff2:	8c 93       	st	X, r24
     ff4:	db c0       	rjmp	.+438    	; 0x11ac <TIMER_init+0x294>
			//flag is cleared automatically when execute ISR
		}
	}
	/*this for timer1 (overflow or CTC)*/
	else if(timerConfigs->e_number==TIMER_ONE){
     ff6:	e9 81       	ldd	r30, Y+1	; 0x01
     ff8:	fa 81       	ldd	r31, Y+2	; 0x02
     ffa:	80 81       	ld	r24, Z
     ffc:	81 30       	cpi	r24, 0x01	; 1
     ffe:	09 f0       	breq	.+2      	; 0x1002 <TIMER_init+0xea>
    1000:	6f c0       	rjmp	.+222    	; 0x10e0 <TIMER_init+0x1c8>
		/*this for timer1 (overflow or CTC)*/
		if(timerConfigs->e_mode==OVERFLOW){
    1002:	e9 81       	ldd	r30, Y+1	; 0x01
    1004:	fa 81       	ldd	r31, Y+2	; 0x02
    1006:	81 81       	ldd	r24, Z+1	; 0x01
    1008:	88 23       	and	r24, r24
    100a:	51 f5       	brne	.+84     	; 0x1060 <TIMER_init+0x148>
			TCCR1A|=(1<<FOC1A);//determine Non-PWM mode and overflow mode and OC is off
    100c:	af e4       	ldi	r26, 0x4F	; 79
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	ef e4       	ldi	r30, 0x4F	; 79
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	88 60       	ori	r24, 0x08	; 8
    1018:	8c 93       	st	X, r24
			TCCR1B|=(TCCR1B & 0xF8)|((timerConfigs->e_clock) &0x07); //set the clock
    101a:	ae e4       	ldi	r26, 0x4E	; 78
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	ee e4       	ldi	r30, 0x4E	; 78
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	28 2f       	mov	r18, r24
    1026:	ee e4       	ldi	r30, 0x4E	; 78
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	98 2f       	mov	r25, r24
    102e:	98 7f       	andi	r25, 0xF8	; 248
    1030:	e9 81       	ldd	r30, Y+1	; 0x01
    1032:	fa 81       	ldd	r31, Y+2	; 0x02
    1034:	82 81       	ldd	r24, Z+2	; 0x02
    1036:	87 70       	andi	r24, 0x07	; 7
    1038:	89 2b       	or	r24, r25
    103a:	82 2b       	or	r24, r18
    103c:	8c 93       	st	X, r24
			TCNT1=timerConfigs->initValue;
    103e:	ac e4       	ldi	r26, 0x4C	; 76
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	e9 81       	ldd	r30, Y+1	; 0x01
    1044:	fa 81       	ldd	r31, Y+2	; 0x02
    1046:	83 81       	ldd	r24, Z+3	; 0x03
    1048:	94 81       	ldd	r25, Z+4	; 0x04
    104a:	11 96       	adiw	r26, 0x01	; 1
    104c:	9c 93       	st	X, r25
    104e:	8e 93       	st	-X, r24
			TIMSK|=(1<<TOIE1);//enable interrupt for overflow module
    1050:	a9 e5       	ldi	r26, 0x59	; 89
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	e9 e5       	ldi	r30, 0x59	; 89
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	84 60       	ori	r24, 0x04	; 4
    105c:	8c 93       	st	X, r24
    105e:	a6 c0       	rjmp	.+332    	; 0x11ac <TIMER_init+0x294>
			//flag is cleared automatically when execute ISR
		}
		else if(timerConfigs->e_mode==CTC){
    1060:	e9 81       	ldd	r30, Y+1	; 0x01
    1062:	fa 81       	ldd	r31, Y+2	; 0x02
    1064:	81 81       	ldd	r24, Z+1	; 0x01
    1066:	81 30       	cpi	r24, 0x01	; 1
    1068:	09 f0       	breq	.+2      	; 0x106c <TIMER_init+0x154>
    106a:	a0 c0       	rjmp	.+320    	; 0x11ac <TIMER_init+0x294>
			TCCR1A|=(1<<FOC1A);//determine Non-PWM mode and OC is off
    106c:	af e4       	ldi	r26, 0x4F	; 79
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	ef e4       	ldi	r30, 0x4F	; 79
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	88 60       	ori	r24, 0x08	; 8
    1078:	8c 93       	st	X, r24
			TCCR1B|=(1<<WGM12);//determine CTC mode
    107a:	ae e4       	ldi	r26, 0x4E	; 78
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	ee e4       	ldi	r30, 0x4E	; 78
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	88 60       	ori	r24, 0x08	; 8
    1086:	8c 93       	st	X, r24
			TCCR1B|=(TCCR1B & 0xF8)|((timerConfigs->e_clock) &0x07); //set the clock
    1088:	ae e4       	ldi	r26, 0x4E	; 78
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	ee e4       	ldi	r30, 0x4E	; 78
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	28 2f       	mov	r18, r24
    1094:	ee e4       	ldi	r30, 0x4E	; 78
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	98 2f       	mov	r25, r24
    109c:	98 7f       	andi	r25, 0xF8	; 248
    109e:	e9 81       	ldd	r30, Y+1	; 0x01
    10a0:	fa 81       	ldd	r31, Y+2	; 0x02
    10a2:	82 81       	ldd	r24, Z+2	; 0x02
    10a4:	87 70       	andi	r24, 0x07	; 7
    10a6:	89 2b       	or	r24, r25
    10a8:	82 2b       	or	r24, r18
    10aa:	8c 93       	st	X, r24
			TCNT1=timerConfigs->initValue;
    10ac:	ac e4       	ldi	r26, 0x4C	; 76
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	e9 81       	ldd	r30, Y+1	; 0x01
    10b2:	fa 81       	ldd	r31, Y+2	; 0x02
    10b4:	83 81       	ldd	r24, Z+3	; 0x03
    10b6:	94 81       	ldd	r25, Z+4	; 0x04
    10b8:	11 96       	adiw	r26, 0x01	; 1
    10ba:	9c 93       	st	X, r25
    10bc:	8e 93       	st	-X, r24
			OCR1A=timerConfigs->compareValue;
    10be:	aa e4       	ldi	r26, 0x4A	; 74
    10c0:	b0 e0       	ldi	r27, 0x00	; 0
    10c2:	e9 81       	ldd	r30, Y+1	; 0x01
    10c4:	fa 81       	ldd	r31, Y+2	; 0x02
    10c6:	85 81       	ldd	r24, Z+5	; 0x05
    10c8:	96 81       	ldd	r25, Z+6	; 0x06
    10ca:	11 96       	adiw	r26, 0x01	; 1
    10cc:	9c 93       	st	X, r25
    10ce:	8e 93       	st	-X, r24
			TIMSK|=(1<<OCIE1A);//enable interrupt for CTC module
    10d0:	a9 e5       	ldi	r26, 0x59	; 89
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	e9 e5       	ldi	r30, 0x59	; 89
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	80 61       	ori	r24, 0x10	; 16
    10dc:	8c 93       	st	X, r24
    10de:	66 c0       	rjmp	.+204    	; 0x11ac <TIMER_init+0x294>
			//flag is cleared automatically when execute ISR
		}
	}

	/*this for timer2 (overflow or CTC)*/
	else if(timerConfigs->e_number==TIMER_TWO){
    10e0:	e9 81       	ldd	r30, Y+1	; 0x01
    10e2:	fa 81       	ldd	r31, Y+2	; 0x02
    10e4:	80 81       	ld	r24, Z
    10e6:	82 30       	cpi	r24, 0x02	; 2
    10e8:	09 f0       	breq	.+2      	; 0x10ec <TIMER_init+0x1d4>
    10ea:	60 c0       	rjmp	.+192    	; 0x11ac <TIMER_init+0x294>
		if(timerConfigs->e_mode==OVERFLOW){
    10ec:	e9 81       	ldd	r30, Y+1	; 0x01
    10ee:	fa 81       	ldd	r31, Y+2	; 0x02
    10f0:	81 81       	ldd	r24, Z+1	; 0x01
    10f2:	88 23       	and	r24, r24
    10f4:	41 f5       	brne	.+80     	; 0x1146 <TIMER_init+0x22e>
			TCCR2|=(1<<FOC2);//determine Non-PWM mode and overflow mode and OC is off
    10f6:	a5 e4       	ldi	r26, 0x45	; 69
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	e5 e4       	ldi	r30, 0x45	; 69
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	80 68       	ori	r24, 0x80	; 128
    1102:	8c 93       	st	X, r24
			TCCR2|=((TCCR2 & 0xF8)|(timerConfigs->e_clock&0x07)); //set the clock
    1104:	a5 e4       	ldi	r26, 0x45	; 69
    1106:	b0 e0       	ldi	r27, 0x00	; 0
    1108:	e5 e4       	ldi	r30, 0x45	; 69
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	28 2f       	mov	r18, r24
    1110:	e5 e4       	ldi	r30, 0x45	; 69
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	98 2f       	mov	r25, r24
    1118:	98 7f       	andi	r25, 0xF8	; 248
    111a:	e9 81       	ldd	r30, Y+1	; 0x01
    111c:	fa 81       	ldd	r31, Y+2	; 0x02
    111e:	82 81       	ldd	r24, Z+2	; 0x02
    1120:	87 70       	andi	r24, 0x07	; 7
    1122:	89 2b       	or	r24, r25
    1124:	82 2b       	or	r24, r18
    1126:	8c 93       	st	X, r24
			TCNT2=timerConfigs->initValue;
    1128:	a4 e4       	ldi	r26, 0x44	; 68
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	e9 81       	ldd	r30, Y+1	; 0x01
    112e:	fa 81       	ldd	r31, Y+2	; 0x02
    1130:	83 81       	ldd	r24, Z+3	; 0x03
    1132:	94 81       	ldd	r25, Z+4	; 0x04
    1134:	8c 93       	st	X, r24
			TIMSK|=(1<<TOIE2);//enable interrupt for overflow module
    1136:	a9 e5       	ldi	r26, 0x59	; 89
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	e9 e5       	ldi	r30, 0x59	; 89
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	80 64       	ori	r24, 0x40	; 64
    1142:	8c 93       	st	X, r24
    1144:	33 c0       	rjmp	.+102    	; 0x11ac <TIMER_init+0x294>
			//flag is cleared automatically when execute ISR
		}
		else if(timerConfigs->e_mode==CTC){
    1146:	e9 81       	ldd	r30, Y+1	; 0x01
    1148:	fa 81       	ldd	r31, Y+2	; 0x02
    114a:	81 81       	ldd	r24, Z+1	; 0x01
    114c:	81 30       	cpi	r24, 0x01	; 1
    114e:	71 f5       	brne	.+92     	; 0x11ac <TIMER_init+0x294>
			TCCR2|=(1<<FOC2)|(1<<WGM21);//determine Non-PWM mode and CTC mode and OC is off
    1150:	a5 e4       	ldi	r26, 0x45	; 69
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	e5 e4       	ldi	r30, 0x45	; 69
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	88 68       	ori	r24, 0x88	; 136
    115c:	8c 93       	st	X, r24
			TCCR2|=((TCCR2 & 0xF8)|(timerConfigs->e_clock&0x07)); //set the clock
    115e:	a5 e4       	ldi	r26, 0x45	; 69
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	e5 e4       	ldi	r30, 0x45	; 69
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	28 2f       	mov	r18, r24
    116a:	e5 e4       	ldi	r30, 0x45	; 69
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	98 2f       	mov	r25, r24
    1172:	98 7f       	andi	r25, 0xF8	; 248
    1174:	e9 81       	ldd	r30, Y+1	; 0x01
    1176:	fa 81       	ldd	r31, Y+2	; 0x02
    1178:	82 81       	ldd	r24, Z+2	; 0x02
    117a:	87 70       	andi	r24, 0x07	; 7
    117c:	89 2b       	or	r24, r25
    117e:	82 2b       	or	r24, r18
    1180:	8c 93       	st	X, r24
			TCNT2=timerConfigs->initValue;
    1182:	a4 e4       	ldi	r26, 0x44	; 68
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	e9 81       	ldd	r30, Y+1	; 0x01
    1188:	fa 81       	ldd	r31, Y+2	; 0x02
    118a:	83 81       	ldd	r24, Z+3	; 0x03
    118c:	94 81       	ldd	r25, Z+4	; 0x04
    118e:	8c 93       	st	X, r24
			OCR2=timerConfigs->compareValue;
    1190:	a3 e4       	ldi	r26, 0x43	; 67
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	e9 81       	ldd	r30, Y+1	; 0x01
    1196:	fa 81       	ldd	r31, Y+2	; 0x02
    1198:	85 81       	ldd	r24, Z+5	; 0x05
    119a:	96 81       	ldd	r25, Z+6	; 0x06
    119c:	8c 93       	st	X, r24
			TIMSK|=(1<<OCIE2);//enable interrupt for CTC module
    119e:	a9 e5       	ldi	r26, 0x59	; 89
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	e9 e5       	ldi	r30, 0x59	; 89
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	80 68       	ori	r24, 0x80	; 128
    11aa:	8c 93       	st	X, r24
			//flag is cleared automatically when execute ISR
		}
	}
}
    11ac:	0f 90       	pop	r0
    11ae:	0f 90       	pop	r0
    11b0:	cf 91       	pop	r28
    11b2:	df 91       	pop	r29
    11b4:	08 95       	ret

000011b6 <TIMER_setCallback>:
//(1/((1/(8000000/pre_clock))*256))*15 //calculate cnt to delay for 15s with any clock
/*
 * Description: Function to set the Call Back function address.
 */
void TIMER_setCallback(void (*a_callBackPtr)(void),TimerNumber timer_no){
    11b6:	df 93       	push	r29
    11b8:	cf 93       	push	r28
    11ba:	00 d0       	rcall	.+0      	; 0x11bc <TIMER_setCallback+0x6>
    11bc:	0f 92       	push	r0
    11be:	cd b7       	in	r28, 0x3d	; 61
    11c0:	de b7       	in	r29, 0x3e	; 62
    11c2:	9a 83       	std	Y+2, r25	; 0x02
    11c4:	89 83       	std	Y+1, r24	; 0x01
    11c6:	6b 83       	std	Y+3, r22	; 0x03
	if(timer_no==TIMER_ZERO)
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	88 23       	and	r24, r24
    11cc:	39 f4       	brne	.+14     	; 0x11dc <TIMER_setCallback+0x26>
		g_callBackPtrT0 = a_callBackPtr;
    11ce:	89 81       	ldd	r24, Y+1	; 0x01
    11d0:	9a 81       	ldd	r25, Y+2	; 0x02
    11d2:	90 93 79 00 	sts	0x0079, r25
    11d6:	80 93 78 00 	sts	0x0078, r24
    11da:	13 c0       	rjmp	.+38     	; 0x1202 <TIMER_setCallback+0x4c>
	else if(timer_no==TIMER_ONE)
    11dc:	8b 81       	ldd	r24, Y+3	; 0x03
    11de:	81 30       	cpi	r24, 0x01	; 1
    11e0:	39 f4       	brne	.+14     	; 0x11f0 <TIMER_setCallback+0x3a>
		g_callBackPtrT1 = a_callBackPtr;
    11e2:	89 81       	ldd	r24, Y+1	; 0x01
    11e4:	9a 81       	ldd	r25, Y+2	; 0x02
    11e6:	90 93 7b 00 	sts	0x007B, r25
    11ea:	80 93 7a 00 	sts	0x007A, r24
    11ee:	09 c0       	rjmp	.+18     	; 0x1202 <TIMER_setCallback+0x4c>
	else if(timer_no==TIMER_TWO)
    11f0:	8b 81       	ldd	r24, Y+3	; 0x03
    11f2:	82 30       	cpi	r24, 0x02	; 2
    11f4:	31 f4       	brne	.+12     	; 0x1202 <TIMER_setCallback+0x4c>
		g_callBackPtrT2 = a_callBackPtr;
    11f6:	89 81       	ldd	r24, Y+1	; 0x01
    11f8:	9a 81       	ldd	r25, Y+2	; 0x02
    11fa:	90 93 7d 00 	sts	0x007D, r25
    11fe:	80 93 7c 00 	sts	0x007C, r24
}
    1202:	0f 90       	pop	r0
    1204:	0f 90       	pop	r0
    1206:	0f 90       	pop	r0
    1208:	cf 91       	pop	r28
    120a:	df 91       	pop	r29
    120c:	08 95       	ret

0000120e <TIMER_deInit>:

void TIMER_deInit(TimerNumber e_timerNumber){
    120e:	df 93       	push	r29
    1210:	cf 93       	push	r28
    1212:	0f 92       	push	r0
    1214:	cd b7       	in	r28, 0x3d	; 61
    1216:	de b7       	in	r29, 0x3e	; 62
    1218:	89 83       	std	Y+1, r24	; 0x01
	if(e_timerNumber == TIMER_ZERO){
    121a:	89 81       	ldd	r24, Y+1	; 0x01
    121c:	88 23       	and	r24, r24
    121e:	31 f5       	brne	.+76     	; 0x126c <TIMER_deInit+0x5e>
		TCCR0=0;//stop clock and give all bits 0 value
    1220:	e3 e5       	ldi	r30, 0x53	; 83
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	10 82       	st	Z, r1
		TCNT0=0;
    1226:	e2 e5       	ldi	r30, 0x52	; 82
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	10 82       	st	Z, r1
		OCR0=0;
    122c:	ec e5       	ldi	r30, 0x5C	; 92
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	10 82       	st	Z, r1
		TIMSK&=~(1<<TOIE0);//disable interrupt for overflow module
    1232:	a9 e5       	ldi	r26, 0x59	; 89
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	e9 e5       	ldi	r30, 0x59	; 89
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	8e 7f       	andi	r24, 0xFE	; 254
    123e:	8c 93       	st	X, r24
		TIMSK&=~(1<<OCIE0);//disable interrupt for CTC module
    1240:	a9 e5       	ldi	r26, 0x59	; 89
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	e9 e5       	ldi	r30, 0x59	; 89
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	8d 7f       	andi	r24, 0xFD	; 253
    124c:	8c 93       	st	X, r24

		TIFR|=(1<<TOV0);//clear overflow flag for t0
    124e:	a8 e5       	ldi	r26, 0x58	; 88
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	e8 e5       	ldi	r30, 0x58	; 88
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	81 60       	ori	r24, 0x01	; 1
    125a:	8c 93       	st	X, r24
		TIFR|=(1<<OCF0);//clear ctc flag for t0
    125c:	a8 e5       	ldi	r26, 0x58	; 88
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	e8 e5       	ldi	r30, 0x58	; 88
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	82 60       	ori	r24, 0x02	; 2
    1268:	8c 93       	st	X, r24
    126a:	56 c0       	rjmp	.+172    	; 0x1318 <TIMER_deInit+0x10a>
	}
	else if(e_timerNumber == TIMER_ONE){
    126c:	89 81       	ldd	r24, Y+1	; 0x01
    126e:	81 30       	cpi	r24, 0x01	; 1
    1270:	59 f5       	brne	.+86     	; 0x12c8 <TIMER_deInit+0xba>
		TCCR1A=0;
    1272:	ef e4       	ldi	r30, 0x4F	; 79
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	10 82       	st	Z, r1
		TCCR1B= 0; //stop the clock
    1278:	ee e4       	ldi	r30, 0x4E	; 78
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	10 82       	st	Z, r1
		TCNT1=0;
    127e:	ec e4       	ldi	r30, 0x4C	; 76
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	11 82       	std	Z+1, r1	; 0x01
    1284:	10 82       	st	Z, r1
		OCR1A=0;
    1286:	ea e4       	ldi	r30, 0x4A	; 74
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	11 82       	std	Z+1, r1	; 0x01
    128c:	10 82       	st	Z, r1

		TIMSK&=~(1<<TOIE1);//disable interrupt for overflow module
    128e:	a9 e5       	ldi	r26, 0x59	; 89
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	e9 e5       	ldi	r30, 0x59	; 89
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	8b 7f       	andi	r24, 0xFB	; 251
    129a:	8c 93       	st	X, r24
		TIMSK&=~(1<<OCIE1A);//disable interrupt for CTC module
    129c:	a9 e5       	ldi	r26, 0x59	; 89
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	e9 e5       	ldi	r30, 0x59	; 89
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	8f 7e       	andi	r24, 0xEF	; 239
    12a8:	8c 93       	st	X, r24

		TIFR|=(1<<TOV1);//clear overflow flag for t1
    12aa:	a8 e5       	ldi	r26, 0x58	; 88
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	e8 e5       	ldi	r30, 0x58	; 88
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	84 60       	ori	r24, 0x04	; 4
    12b6:	8c 93       	st	X, r24
		TIFR|=(1<<OCF1A);//clear ctc flag for t1
    12b8:	a8 e5       	ldi	r26, 0x58	; 88
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	e8 e5       	ldi	r30, 0x58	; 88
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	80 61       	ori	r24, 0x10	; 16
    12c4:	8c 93       	st	X, r24
    12c6:	28 c0       	rjmp	.+80     	; 0x1318 <TIMER_deInit+0x10a>
	}
	else if(e_timerNumber == TIMER_TWO){
    12c8:	89 81       	ldd	r24, Y+1	; 0x01
    12ca:	82 30       	cpi	r24, 0x02	; 2
    12cc:	29 f5       	brne	.+74     	; 0x1318 <TIMER_deInit+0x10a>
		TCCR2=0;//stop clock and give all bits 0 value
    12ce:	e5 e4       	ldi	r30, 0x45	; 69
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	10 82       	st	Z, r1
		TCNT2=0;
    12d4:	e4 e4       	ldi	r30, 0x44	; 68
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	10 82       	st	Z, r1
		OCR2=0;
    12da:	e3 e4       	ldi	r30, 0x43	; 67
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	10 82       	st	Z, r1
		TIMSK&=~(1<<TOIE2);//disable interrupt for overflow module
    12e0:	a9 e5       	ldi	r26, 0x59	; 89
    12e2:	b0 e0       	ldi	r27, 0x00	; 0
    12e4:	e9 e5       	ldi	r30, 0x59	; 89
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	8f 7b       	andi	r24, 0xBF	; 191
    12ec:	8c 93       	st	X, r24
		TIMSK&=~(1<<OCIE2);//disable interrupt for CTC module
    12ee:	a9 e5       	ldi	r26, 0x59	; 89
    12f0:	b0 e0       	ldi	r27, 0x00	; 0
    12f2:	e9 e5       	ldi	r30, 0x59	; 89
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	80 81       	ld	r24, Z
    12f8:	8f 77       	andi	r24, 0x7F	; 127
    12fa:	8c 93       	st	X, r24

		TIFR|=(1<<TOV2);//clear overflow flag for t2
    12fc:	a8 e5       	ldi	r26, 0x58	; 88
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	e8 e5       	ldi	r30, 0x58	; 88
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	80 64       	ori	r24, 0x40	; 64
    1308:	8c 93       	st	X, r24
		TIFR|=(1<<OCF2);//clear ctc flag for t2
    130a:	a8 e5       	ldi	r26, 0x58	; 88
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	e8 e5       	ldi	r30, 0x58	; 88
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	80 68       	ori	r24, 0x80	; 128
    1316:	8c 93       	st	X, r24
	}
}
    1318:	0f 90       	pop	r0
    131a:	cf 91       	pop	r28
    131c:	df 91       	pop	r29
    131e:	08 95       	ret

00001320 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(TWIConfigType* twiConfigs)
{
    1320:	0f 93       	push	r16
    1322:	1f 93       	push	r17
    1324:	df 93       	push	r29
    1326:	cf 93       	push	r28
    1328:	00 d0       	rcall	.+0      	; 0x132a <TWI_init+0xa>
    132a:	cd b7       	in	r28, 0x3d	; 61
    132c:	de b7       	in	r29, 0x3e	; 62
    132e:	9a 83       	std	Y+2, r25	; 0x02
    1330:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: from 100.000 to 400.000 kbps
     * using zero prescaler TWPS=00 and actual F_CPU
     * and rate is resulted based on configuration data*/
	TWBR=((F_CPU/twiConfigs->bitRate)-16)/(2);
    1332:	00 e2       	ldi	r16, 0x20	; 32
    1334:	10 e0       	ldi	r17, 0x00	; 0
    1336:	e9 81       	ldd	r30, Y+1	; 0x01
    1338:	fa 81       	ldd	r31, Y+2	; 0x02
    133a:	21 81       	ldd	r18, Z+1	; 0x01
    133c:	32 81       	ldd	r19, Z+2	; 0x02
    133e:	43 81       	ldd	r20, Z+3	; 0x03
    1340:	54 81       	ldd	r21, Z+4	; 0x04
    1342:	80 e0       	ldi	r24, 0x00	; 0
    1344:	92 e1       	ldi	r25, 0x12	; 18
    1346:	aa e7       	ldi	r26, 0x7A	; 122
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	bc 01       	movw	r22, r24
    134c:	cd 01       	movw	r24, r26
    134e:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <__udivmodsi4>
    1352:	da 01       	movw	r26, r20
    1354:	c9 01       	movw	r24, r18
    1356:	40 97       	sbiw	r24, 0x10	; 16
    1358:	a1 09       	sbc	r26, r1
    135a:	b1 09       	sbc	r27, r1
    135c:	b6 95       	lsr	r27
    135e:	a7 95       	ror	r26
    1360:	97 95       	ror	r25
    1362:	87 95       	ror	r24
    1364:	f8 01       	movw	r30, r16
    1366:	80 83       	st	Z, r24
	//TWBR = 0x02;
	TWSR = 0x00;
    1368:	e1 e2       	ldi	r30, 0x21	; 33
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = twiConfigs->myAddress; // my address = 0x01 :)
    136e:	a2 e2       	ldi	r26, 0x22	; 34
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	e9 81       	ldd	r30, Y+1	; 0x01
    1374:	fa 81       	ldd	r31, Y+2	; 0x02
    1376:	80 81       	ld	r24, Z
    1378:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    137a:	e6 e5       	ldi	r30, 0x56	; 86
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	84 e0       	ldi	r24, 0x04	; 4
    1380:	80 83       	st	Z, r24
}
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	cf 91       	pop	r28
    1388:	df 91       	pop	r29
    138a:	1f 91       	pop	r17
    138c:	0f 91       	pop	r16
    138e:	08 95       	ret

00001390 <TWI_start>:

void TWI_start(void)
{
    1390:	df 93       	push	r29
    1392:	cf 93       	push	r28
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1398:	e6 e5       	ldi	r30, 0x56	; 86
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	84 ea       	ldi	r24, 0xA4	; 164
    139e:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    13a0:	e6 e5       	ldi	r30, 0x56	; 86
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	88 23       	and	r24, r24
    13a8:	dc f7       	brge	.-10     	; 0x13a0 <TWI_start+0x10>
}
    13aa:	cf 91       	pop	r28
    13ac:	df 91       	pop	r29
    13ae:	08 95       	ret

000013b0 <TWI_stop>:

void TWI_stop(void)
{
    13b0:	df 93       	push	r29
    13b2:	cf 93       	push	r28
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    13b8:	e6 e5       	ldi	r30, 0x56	; 86
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	84 e9       	ldi	r24, 0x94	; 148
    13be:	80 83       	st	Z, r24
}
    13c0:	cf 91       	pop	r28
    13c2:	df 91       	pop	r29
    13c4:	08 95       	ret

000013c6 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    13c6:	df 93       	push	r29
    13c8:	cf 93       	push	r28
    13ca:	0f 92       	push	r0
    13cc:	cd b7       	in	r28, 0x3d	; 61
    13ce:	de b7       	in	r29, 0x3e	; 62
    13d0:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    13d2:	e3 e2       	ldi	r30, 0x23	; 35
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	89 81       	ldd	r24, Y+1	; 0x01
    13d8:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    13da:	e6 e5       	ldi	r30, 0x56	; 86
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	84 e8       	ldi	r24, 0x84	; 132
    13e0:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    13e2:	e6 e5       	ldi	r30, 0x56	; 86
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	88 23       	and	r24, r24
    13ea:	dc f7       	brge	.-10     	; 0x13e2 <TWI_writeByte+0x1c>
}
    13ec:	0f 90       	pop	r0
    13ee:	cf 91       	pop	r28
    13f0:	df 91       	pop	r29
    13f2:	08 95       	ret

000013f4 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    13f4:	df 93       	push	r29
    13f6:	cf 93       	push	r28
    13f8:	cd b7       	in	r28, 0x3d	; 61
    13fa:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    13fc:	e6 e5       	ldi	r30, 0x56	; 86
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	84 ec       	ldi	r24, 0xC4	; 196
    1402:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1404:	e6 e5       	ldi	r30, 0x56	; 86
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	80 81       	ld	r24, Z
    140a:	88 23       	and	r24, r24
    140c:	dc f7       	brge	.-10     	; 0x1404 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    140e:	e3 e2       	ldi	r30, 0x23	; 35
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
}
    1414:	cf 91       	pop	r28
    1416:	df 91       	pop	r29
    1418:	08 95       	ret

0000141a <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    141a:	df 93       	push	r29
    141c:	cf 93       	push	r28
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1422:	e6 e5       	ldi	r30, 0x56	; 86
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	84 e8       	ldi	r24, 0x84	; 132
    1428:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    142a:	e6 e5       	ldi	r30, 0x56	; 86
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	88 23       	and	r24, r24
    1432:	dc f7       	brge	.-10     	; 0x142a <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    1434:	e3 e2       	ldi	r30, 0x23	; 35
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
}
    143a:	cf 91       	pop	r28
    143c:	df 91       	pop	r29
    143e:	08 95       	ret

00001440 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1440:	df 93       	push	r29
    1442:	cf 93       	push	r28
    1444:	0f 92       	push	r0
    1446:	cd b7       	in	r28, 0x3d	; 61
    1448:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    144a:	e1 e2       	ldi	r30, 0x21	; 33
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	88 7f       	andi	r24, 0xF8	; 248
    1452:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1454:	89 81       	ldd	r24, Y+1	; 0x01
}
    1456:	0f 90       	pop	r0
    1458:	cf 91       	pop	r28
    145a:	df 91       	pop	r29
    145c:	08 95       	ret

0000145e <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(UartConfigType* uartConfigs)
{
    145e:	df 93       	push	r29
    1460:	cf 93       	push	r28
    1462:	00 d0       	rcall	.+0      	; 0x1464 <UART_init+0x6>
    1464:	00 d0       	rcall	.+0      	; 0x1466 <UART_init+0x8>
    1466:	cd b7       	in	r28, 0x3d	; 61
    1468:	de b7       	in	r29, 0x3e	; 62
    146a:	9c 83       	std	Y+4, r25	; 0x04
    146c:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    146e:	1a 82       	std	Y+2, r1	; 0x02
    1470:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    1472:	eb e2       	ldi	r30, 0x2B	; 43
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	82 e0       	ldi	r24, 0x02	; 2
    1478:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    147a:	ea e2       	ldi	r30, 0x2A	; 42
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	88 e1       	ldi	r24, 0x18	; 24
    1480:	80 83       	st	Z, r24
	UCSRB|=(((uartConfigs->characterSize )&(0x04))<<UCSZ0);
    1482:	aa e2       	ldi	r26, 0x2A	; 42
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	ea e2       	ldi	r30, 0x2A	; 42
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	28 2f       	mov	r18, r24
    148e:	eb 81       	ldd	r30, Y+3	; 0x03
    1490:	fc 81       	ldd	r31, Y+4	; 0x04
    1492:	80 81       	ld	r24, Z
    1494:	88 2f       	mov	r24, r24
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	84 70       	andi	r24, 0x04	; 4
    149a:	90 70       	andi	r25, 0x00	; 0
    149c:	88 0f       	add	r24, r24
    149e:	99 1f       	adc	r25, r25
    14a0:	82 2b       	or	r24, r18
    14a2:	8c 93       	st	X, r24
	 * UPM1:0  = parity bit initialized based on it's value that passed to function
	 * USBS    = stop bit initialized based on it's value that passed to function
	 * UCSZ1:0 = initialize data mode based on it's value that passed to function
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (((uartConfigs->characterSize )&(0x03))<<UCSZ0)|(uartConfigs->stopBitSelect<<USBS);
    14a4:	a0 e4       	ldi	r26, 0x40	; 64
    14a6:	b0 e0       	ldi	r27, 0x00	; 0
    14a8:	eb 81       	ldd	r30, Y+3	; 0x03
    14aa:	fc 81       	ldd	r31, Y+4	; 0x04
    14ac:	80 81       	ld	r24, Z
    14ae:	88 2f       	mov	r24, r24
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	83 70       	andi	r24, 0x03	; 3
    14b4:	90 70       	andi	r25, 0x00	; 0
    14b6:	88 0f       	add	r24, r24
    14b8:	99 1f       	adc	r25, r25
    14ba:	28 2f       	mov	r18, r24
    14bc:	20 68       	ori	r18, 0x80	; 128
    14be:	eb 81       	ldd	r30, Y+3	; 0x03
    14c0:	fc 81       	ldd	r31, Y+4	; 0x04
    14c2:	82 81       	ldd	r24, Z+2	; 0x02
    14c4:	88 2f       	mov	r24, r24
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	88 0f       	add	r24, r24
    14ca:	99 1f       	adc	r25, r25
    14cc:	88 0f       	add	r24, r24
    14ce:	99 1f       	adc	r25, r25
    14d0:	88 0f       	add	r24, r24
    14d2:	99 1f       	adc	r25, r25
    14d4:	82 2b       	or	r24, r18
    14d6:	8c 93       	st	X, r24
	UCSRC|=(uartConfigs->parityMode<<UPM0);
    14d8:	a0 e4       	ldi	r26, 0x40	; 64
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	e0 e4       	ldi	r30, 0x40	; 64
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	28 2f       	mov	r18, r24
    14e4:	eb 81       	ldd	r30, Y+3	; 0x03
    14e6:	fc 81       	ldd	r31, Y+4	; 0x04
    14e8:	81 81       	ldd	r24, Z+1	; 0x01
    14ea:	88 2f       	mov	r24, r24
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	82 95       	swap	r24
    14f0:	92 95       	swap	r25
    14f2:	90 7f       	andi	r25, 0xF0	; 240
    14f4:	98 27       	eor	r25, r24
    14f6:	80 7f       	andi	r24, 0xF0	; 240
    14f8:	98 27       	eor	r25, r24
    14fa:	82 2b       	or	r24, r18
    14fc:	8c 93       	st	X, r24



	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (uartConfigs->baudRate * 8UL))) - 1);
    14fe:	eb 81       	ldd	r30, Y+3	; 0x03
    1500:	fc 81       	ldd	r31, Y+4	; 0x04
    1502:	83 81       	ldd	r24, Z+3	; 0x03
    1504:	94 81       	ldd	r25, Z+4	; 0x04
    1506:	a5 81       	ldd	r26, Z+5	; 0x05
    1508:	b6 81       	ldd	r27, Z+6	; 0x06
    150a:	88 0f       	add	r24, r24
    150c:	99 1f       	adc	r25, r25
    150e:	aa 1f       	adc	r26, r26
    1510:	bb 1f       	adc	r27, r27
    1512:	88 0f       	add	r24, r24
    1514:	99 1f       	adc	r25, r25
    1516:	aa 1f       	adc	r26, r26
    1518:	bb 1f       	adc	r27, r27
    151a:	88 0f       	add	r24, r24
    151c:	99 1f       	adc	r25, r25
    151e:	aa 1f       	adc	r26, r26
    1520:	bb 1f       	adc	r27, r27
    1522:	9c 01       	movw	r18, r24
    1524:	ad 01       	movw	r20, r26
    1526:	80 e0       	ldi	r24, 0x00	; 0
    1528:	92 e1       	ldi	r25, 0x12	; 18
    152a:	aa e7       	ldi	r26, 0x7A	; 122
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	bc 01       	movw	r22, r24
    1530:	cd 01       	movw	r24, r26
    1532:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <__udivmodsi4>
    1536:	da 01       	movw	r26, r20
    1538:	c9 01       	movw	r24, r18
    153a:	01 97       	sbiw	r24, 0x01	; 1
    153c:	9a 83       	std	Y+2, r25	; 0x02
    153e:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    1540:	e0 e4       	ldi	r30, 0x40	; 64
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	89 81       	ldd	r24, Y+1	; 0x01
    1546:	9a 81       	ldd	r25, Y+2	; 0x02
    1548:	89 2f       	mov	r24, r25
    154a:	99 27       	eor	r25, r25
    154c:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    154e:	e9 e2       	ldi	r30, 0x29	; 41
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	89 81       	ldd	r24, Y+1	; 0x01
    1554:	80 83       	st	Z, r24
}
    1556:	0f 90       	pop	r0
    1558:	0f 90       	pop	r0
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	cf 91       	pop	r28
    1560:	df 91       	pop	r29
    1562:	08 95       	ret

00001564 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    1564:	df 93       	push	r29
    1566:	cf 93       	push	r28
    1568:	0f 92       	push	r0
    156a:	cd b7       	in	r28, 0x3d	; 61
    156c:	de b7       	in	r29, 0x3e	; 62
    156e:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    1570:	eb e2       	ldi	r30, 0x2B	; 43
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	88 2f       	mov	r24, r24
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	80 72       	andi	r24, 0x20	; 32
    157c:	90 70       	andi	r25, 0x00	; 0
    157e:	00 97       	sbiw	r24, 0x00	; 0
    1580:	b9 f3       	breq	.-18     	; 0x1570 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    1582:	ec e2       	ldi	r30, 0x2C	; 44
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	89 81       	ldd	r24, Y+1	; 0x01
    1588:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    158a:	0f 90       	pop	r0
    158c:	cf 91       	pop	r28
    158e:	df 91       	pop	r29
    1590:	08 95       	ret

00001592 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    1592:	df 93       	push	r29
    1594:	cf 93       	push	r28
    1596:	cd b7       	in	r28, 0x3d	; 61
    1598:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    159a:	eb e2       	ldi	r30, 0x2B	; 43
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	88 23       	and	r24, r24
    15a2:	dc f7       	brge	.-10     	; 0x159a <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    15a4:	ec e2       	ldi	r30, 0x2C	; 44
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
}
    15aa:	cf 91       	pop	r28
    15ac:	df 91       	pop	r29
    15ae:	08 95       	ret

000015b0 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    15b0:	df 93       	push	r29
    15b2:	cf 93       	push	r28
    15b4:	00 d0       	rcall	.+0      	; 0x15b6 <UART_sendString+0x6>
    15b6:	0f 92       	push	r0
    15b8:	cd b7       	in	r28, 0x3d	; 61
    15ba:	de b7       	in	r29, 0x3e	; 62
    15bc:	9b 83       	std	Y+3, r25	; 0x03
    15be:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    15c0:	19 82       	std	Y+1, r1	; 0x01
    15c2:	0e c0       	rjmp	.+28     	; 0x15e0 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    15c4:	89 81       	ldd	r24, Y+1	; 0x01
    15c6:	28 2f       	mov	r18, r24
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	8a 81       	ldd	r24, Y+2	; 0x02
    15cc:	9b 81       	ldd	r25, Y+3	; 0x03
    15ce:	fc 01       	movw	r30, r24
    15d0:	e2 0f       	add	r30, r18
    15d2:	f3 1f       	adc	r31, r19
    15d4:	80 81       	ld	r24, Z
    15d6:	0e 94 b2 0a 	call	0x1564	; 0x1564 <UART_sendByte>
		i++;
    15da:	89 81       	ldd	r24, Y+1	; 0x01
    15dc:	8f 5f       	subi	r24, 0xFF	; 255
    15de:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    15e0:	89 81       	ldd	r24, Y+1	; 0x01
    15e2:	28 2f       	mov	r18, r24
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	8a 81       	ldd	r24, Y+2	; 0x02
    15e8:	9b 81       	ldd	r25, Y+3	; 0x03
    15ea:	fc 01       	movw	r30, r24
    15ec:	e2 0f       	add	r30, r18
    15ee:	f3 1f       	adc	r31, r19
    15f0:	80 81       	ld	r24, Z
    15f2:	88 23       	and	r24, r24
    15f4:	39 f7       	brne	.-50     	; 0x15c4 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    15f6:	0f 90       	pop	r0
    15f8:	0f 90       	pop	r0
    15fa:	0f 90       	pop	r0
    15fc:	cf 91       	pop	r28
    15fe:	df 91       	pop	r29
    1600:	08 95       	ret

00001602 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    1602:	0f 93       	push	r16
    1604:	1f 93       	push	r17
    1606:	df 93       	push	r29
    1608:	cf 93       	push	r28
    160a:	00 d0       	rcall	.+0      	; 0x160c <UART_receiveString+0xa>
    160c:	0f 92       	push	r0
    160e:	cd b7       	in	r28, 0x3d	; 61
    1610:	de b7       	in	r29, 0x3e	; 62
    1612:	9b 83       	std	Y+3, r25	; 0x03
    1614:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1616:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    1618:	89 81       	ldd	r24, Y+1	; 0x01
    161a:	28 2f       	mov	r18, r24
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	8a 81       	ldd	r24, Y+2	; 0x02
    1620:	9b 81       	ldd	r25, Y+3	; 0x03
    1622:	8c 01       	movw	r16, r24
    1624:	02 0f       	add	r16, r18
    1626:	13 1f       	adc	r17, r19
    1628:	0e 94 c9 0a 	call	0x1592	; 0x1592 <UART_recieveByte>
    162c:	f8 01       	movw	r30, r16
    162e:	80 83       	st	Z, r24
    1630:	0f c0       	rjmp	.+30     	; 0x1650 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    1632:	89 81       	ldd	r24, Y+1	; 0x01
    1634:	8f 5f       	subi	r24, 0xFF	; 255
    1636:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    1638:	89 81       	ldd	r24, Y+1	; 0x01
    163a:	28 2f       	mov	r18, r24
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	8a 81       	ldd	r24, Y+2	; 0x02
    1640:	9b 81       	ldd	r25, Y+3	; 0x03
    1642:	8c 01       	movw	r16, r24
    1644:	02 0f       	add	r16, r18
    1646:	13 1f       	adc	r17, r19
    1648:	0e 94 c9 0a 	call	0x1592	; 0x1592 <UART_recieveByte>
    164c:	f8 01       	movw	r30, r16
    164e:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    1650:	89 81       	ldd	r24, Y+1	; 0x01
    1652:	28 2f       	mov	r18, r24
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	8a 81       	ldd	r24, Y+2	; 0x02
    1658:	9b 81       	ldd	r25, Y+3	; 0x03
    165a:	fc 01       	movw	r30, r24
    165c:	e2 0f       	add	r30, r18
    165e:	f3 1f       	adc	r31, r19
    1660:	80 81       	ld	r24, Z
    1662:	83 32       	cpi	r24, 0x23	; 35
    1664:	31 f7       	brne	.-52     	; 0x1632 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    1666:	89 81       	ldd	r24, Y+1	; 0x01
    1668:	28 2f       	mov	r18, r24
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	8a 81       	ldd	r24, Y+2	; 0x02
    166e:	9b 81       	ldd	r25, Y+3	; 0x03
    1670:	fc 01       	movw	r30, r24
    1672:	e2 0f       	add	r30, r18
    1674:	f3 1f       	adc	r31, r19
    1676:	10 82       	st	Z, r1
}
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
    167e:	cf 91       	pop	r28
    1680:	df 91       	pop	r29
    1682:	1f 91       	pop	r17
    1684:	0f 91       	pop	r16
    1686:	08 95       	ret

00001688 <__udivmodhi4>:
    1688:	aa 1b       	sub	r26, r26
    168a:	bb 1b       	sub	r27, r27
    168c:	51 e1       	ldi	r21, 0x11	; 17
    168e:	07 c0       	rjmp	.+14     	; 0x169e <__udivmodhi4_ep>

00001690 <__udivmodhi4_loop>:
    1690:	aa 1f       	adc	r26, r26
    1692:	bb 1f       	adc	r27, r27
    1694:	a6 17       	cp	r26, r22
    1696:	b7 07       	cpc	r27, r23
    1698:	10 f0       	brcs	.+4      	; 0x169e <__udivmodhi4_ep>
    169a:	a6 1b       	sub	r26, r22
    169c:	b7 0b       	sbc	r27, r23

0000169e <__udivmodhi4_ep>:
    169e:	88 1f       	adc	r24, r24
    16a0:	99 1f       	adc	r25, r25
    16a2:	5a 95       	dec	r21
    16a4:	a9 f7       	brne	.-22     	; 0x1690 <__udivmodhi4_loop>
    16a6:	80 95       	com	r24
    16a8:	90 95       	com	r25
    16aa:	bc 01       	movw	r22, r24
    16ac:	cd 01       	movw	r24, r26
    16ae:	08 95       	ret

000016b0 <__udivmodsi4>:
    16b0:	a1 e2       	ldi	r26, 0x21	; 33
    16b2:	1a 2e       	mov	r1, r26
    16b4:	aa 1b       	sub	r26, r26
    16b6:	bb 1b       	sub	r27, r27
    16b8:	fd 01       	movw	r30, r26
    16ba:	0d c0       	rjmp	.+26     	; 0x16d6 <__udivmodsi4_ep>

000016bc <__udivmodsi4_loop>:
    16bc:	aa 1f       	adc	r26, r26
    16be:	bb 1f       	adc	r27, r27
    16c0:	ee 1f       	adc	r30, r30
    16c2:	ff 1f       	adc	r31, r31
    16c4:	a2 17       	cp	r26, r18
    16c6:	b3 07       	cpc	r27, r19
    16c8:	e4 07       	cpc	r30, r20
    16ca:	f5 07       	cpc	r31, r21
    16cc:	20 f0       	brcs	.+8      	; 0x16d6 <__udivmodsi4_ep>
    16ce:	a2 1b       	sub	r26, r18
    16d0:	b3 0b       	sbc	r27, r19
    16d2:	e4 0b       	sbc	r30, r20
    16d4:	f5 0b       	sbc	r31, r21

000016d6 <__udivmodsi4_ep>:
    16d6:	66 1f       	adc	r22, r22
    16d8:	77 1f       	adc	r23, r23
    16da:	88 1f       	adc	r24, r24
    16dc:	99 1f       	adc	r25, r25
    16de:	1a 94       	dec	r1
    16e0:	69 f7       	brne	.-38     	; 0x16bc <__udivmodsi4_loop>
    16e2:	60 95       	com	r22
    16e4:	70 95       	com	r23
    16e6:	80 95       	com	r24
    16e8:	90 95       	com	r25
    16ea:	9b 01       	movw	r18, r22
    16ec:	ac 01       	movw	r20, r24
    16ee:	bd 01       	movw	r22, r26
    16f0:	cf 01       	movw	r24, r30
    16f2:	08 95       	ret

000016f4 <strcmp>:
    16f4:	fb 01       	movw	r30, r22
    16f6:	dc 01       	movw	r26, r24
    16f8:	8d 91       	ld	r24, X+
    16fa:	01 90       	ld	r0, Z+
    16fc:	80 19       	sub	r24, r0
    16fe:	01 10       	cpse	r0, r1
    1700:	d9 f3       	breq	.-10     	; 0x16f8 <strcmp+0x4>
    1702:	99 0b       	sbc	r25, r25
    1704:	08 95       	ret

00001706 <_exit>:
    1706:	f8 94       	cli

00001708 <__stop_program>:
    1708:	ff cf       	rjmp	.-2      	; 0x1708 <__stop_program>
